<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orleans</name>
    </assembly>
    <members>
        <member name="T:Orleans.AsyncSerialExecutor">
            <summary>
            A utility class that provides serial execution of async functions.
            In can be used inside reentrant grain code to execute some methods in anon-reentrant (serial) way.
            It is NOT thread safe and thus not to be used outside grain code.
            </summary>
        </member>
        <member name="M:Orleans.AsyncSerialExecutor.SubmitNext(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Submit the next function for execution. It will execute after all previously submitted functions have finished, without interleaving their executions.
            Returns a promise that represents the execution of this given function. 
            The returned promise will be resolved when this function is done executing.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AsyncExecutorWithRetries">
            <summary>
            This class a convinent utiliity class to execute a certain asyncronous function with retires, 
            allowing to specify custom retry filters and policies.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries(System.Func{System.Int32,System.Threading.Tasks.Task},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.AsyncExecutorWithRetries.ExecuteWithRetries``1(System.Func{System.Int32,System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.Func{``0,System.Int32,System.Boolean},System.Func{System.Exception,System.Int32,System.Boolean},System.TimeSpan,Orleans.IBackoffProvider,Orleans.IBackoffProvider)">
            <summary>
            Execute a given function a number of times, based on retry configuration parameters.
            </summary>
            <param name="function">Function to execute</param>
            <param name="maxNumSuccessTries">Maximal number of successful execution attempts. 
            ExecuteWithRetries will try to re-execute the given function again if directed so by retryValueFilter.
            Set to -1 for unlimited number of success retries, until retryValueFilter is satisfied.
            Set to 0 for only one success attempt, which will cause retryValueFilter to be ignored and the given function executed only once until first success.</param>
            <param name="maxNumErrorTries">Maximal number of execution attempts due to errors.
            Set to -1 for unlimited number of error retries, until retryExceptionFilter is satisfied.</param>
            <param name="retryValueFilter">Filter function to indicate if successful execution should be retied.
            Set to null to disable successful retries.</param>
            <param name="retryExceptionFilter">Filter function to indicate if error execution should be retied.
            Set to null to disable error retries.</param>
            <param name="maxExecutionTime">The maximal execution time of the ExecuteWithRetries function.</param>
            <param name="onSuccessBackOff">The backoff provider object, which determines how much to wait between success retries.</param>
            <param name="onErrorBackOff">The backoff provider object, which determines how much to wait between error retries</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.AsyncLock">
            <summary>
            An async mutual exclusion mechanism that supports scoping via ‘using’.
            </summary>
            <remarks>
            (Adapted from http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx)
            
            When programming with <b>async</b>, the <b>lock</b> keyword is problematic:
            <list type="bullet">
                <item><b>lock</b> will cause the thread to block while it waits for exclusive access to the critical section of code.</item>
                <item>The <b>await</b> keyword cannot be used within the scope of a <b>lock</b> construct.</item>
            </list>
            
            It is still useful, at times, to provide exclusive access to a critical section of code. AsyncLock provides semantics
            that correspond to that of a (non-recursive) mutex, while maintining compatibility with the tenets of async programming. 
            </remarks>
            <example>
            The following example implements some work that needs to be done under lock:
            <code>
            class Test
            {
                private AsyncLock _initLock = new AsyncLock();
                public async Task&lt;int> WorkUnderLock()
                {
                        using (await _initLock.LockAsync()) // analogous to lock(_initLock)
                        {
                             return await DoSomeWork();
                        }
                }
            }
            </code>
            </example>
            
            We decided to keep the implemention simple and mimic the semantics of a regular mutex as much as possible.
            1) AsyncLock is NOT IDisposable, since we don't want to give the developer an option to erraneously manualy dispose the lock 
            while there may be some unreleased LockReleasers.
            2) AsyncLock does NOT have to implement the Finalizer function. The underlying resource of SemaphoreSlim will be eventually released by the .NET, 
            when SemaphoreSlim is finalized. Having finalizer for AsyncLock will not speed it up.
            3) LockReleaser is IDisposable to implement the "using" pattern.
            4) LockReleaser does NOT have to implement the Finalizer function. If users forget to Dispose the LockReleaser (analagous to forgetting to release a mutex)
            the AsyncLock wil remain locked, which may potentialy cause deadlock. This is OK, since these are the exact regular mutex semantics - if one forgets to unlcok the mutex, it stays locked. 
        </member>
        <member name="T:Orleans.Runtime.IPipeline">
            <summary>
            A utility interface that allows to control the rate of generation of asynchronous activities.
            </summary>
            <seealso cref="T:Orleans.Runtime.AsyncPipeline"/>   
        </member>
        <member name="T:Orleans.Runtime.AsyncPipeline">
            <summary>
            A helper utility class that allows to control the rate of generation of asynchronous activities.
            Maintains a pipeline of asynchronous operations up to a given maximal capacity and blocks the calling thread if the pipeline 
            gets too deep before enqueued operations are not finished.
            Effectively adds a back-pressure to the caller.
            This is mainly usefull for stress-testing grains under controlled load and should never be used from within a grain code! 
            </summary>
        </member>
        <member name="F:Orleans.Runtime.AsyncPipeline.DEFAULT_CAPACITY">
            <summary>
            The Default Capacity of this AsyncPipeline. Equals to 10.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor">
            <summary>
            Constructs an empty AsyncPipeline with capacity equal to the DefaultCapacity.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.#ctor(System.Int32)">
            <summary>
            Constructs an empty AsyncPipeline with a given capacity.
            </summary>
            <param name="capacity">The maximal capacity of this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Add(System.Threading.Tasks.Task)">
            <summary>
            Adds a new task to this AsyncPipeline.
            </summary>
            <param name="task">A task to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="task">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.AddRange``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Adds a collection of tasks to this AsyncPipeline.
            </summary>
            <param name="task">A collection of tasks to add to this AsyncPipeline.</param>
        </member>
        <member name="M:Orleans.Runtime.AsyncPipeline.Wait">
            <summary>
            Waits until all currently queued asynchronous operations are done.
            Blocks the calling thread.
            </summary>
            <param name="task">A task to add to this AsyncPipeline.</param>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Capacity">
            <summary>
            The maximal number of async in-flight operations that can be enqueued into this async pipeline.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.AsyncPipeline.Count">
            <summary>
            The number of items currently enqueued into this async pipeline.
            </summary>
        </member>
        <member name="T:Orleans.PublicOrleansTaskExtentions">
            <summary>
            Utility functions for dealing with Task's.
            </summary>
        </member>
        <member name="M:Orleans.PublicOrleansTaskExtentions.Ignore(System.Threading.Tasks.Task)">
            <summary>
            Observes and ignores a potential exception on a given Task.
            If a Task fails and throws an exception which is never observed, it will be caught by the .NET finalizer thread.
            This function awaits the given task and if the exception is thrown, it observes this exception and simply ignores it.
            This will prevent the escalation of this exception to the .NET finalizer thread.
            </summary>
            <param name="task">The task to be ignored.</param>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeout">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The completed task</returns>
        </member>
        <member name="M:Orleans.OrleansTaskExtentions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeout">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The value of the completed task</returns>
        </member>
        <member name="T:Orleans.TaskDone">
            <summary>
            A special void 'Done' Task that is already in the RunToCompletion state.
            Equivalent to Task.FromResult(1).
            </summary>
        </member>
        <member name="P:Orleans.TaskDone.Done">
            <summary>
            A special 'Done' Task that is already in the RunToCompletion state
            </summary>
        </member>
        <member name="T:Orleans.GrainState">
            <summary>
            Base class for generated grain state classes.
            </summary>
        </member>
        <member name="T:Orleans.IGrainState">
            <summary>
            Base interface for interfaces that define persistent state properties of a grain.
            </summary>
        </member>
        <member name="M:Orleans.IGrainState.AsDictionary">
            <summary>
            Return a snapshot of the current grain state data, as a Dictionary of Key-Value pairs.
            </summary>
        </member>
        <member name="M:Orleans.IGrainState.SetAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the current grain state data with the specified Dictionary of Key-Value pairs.
            </summary>
        </member>
        <member name="P:Orleans.IGrainState.Etag">
            <summary>
            Opaque value set by the storage provider representing an 'Etag' setting for the last time the state data was read from backing store.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.AsDictionaryInternal">
            <summary>
            This is used for serializing the state, so all base class fields must be here
            </summary>
        </member>
        <member name="M:Orleans.GrainState.SetAllInternal(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This is used for serializing the state, so all base class fields must be here
            </summary>
        </member>
        <member name="M:Orleans.GrainState.DeepCopy">
            <summary>
            Called from generated code.
            </summary>
            <returns>Deep copy of this grain state object.</returns>
        </member>
        <member name="M:Orleans.GrainState.SerializeTo(Orleans.Serialization.BinaryTokenStreamWriter)">
            <summary>
            Called from generated code.
            </summary>
            <param name="stream">Stream to serialize this grain state object to.</param>
        </member>
        <member name="M:Orleans.GrainState.DeserializeFrom(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Called from generated code.
            </summary>
            <param name="stream">Stream to recover / repopulate this grain state object from.</param>
        </member>
        <member name="M:Orleans.GrainState.#ctor(System.String)">
            <summary>
            Constructs a new grain state object for a grain.
            </summary>
            <param name="reference">The type of the associated grains that use this GrainState object. Used to initialize the <c>GrainType</c> property.</param>
        </member>
        <member name="M:Orleans.GrainState.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.ClearStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="M:Orleans.GrainState.AsDictionary">
            <summary>
            Converts this property bag into a dictionary.
            This is a default Reflection-based implemenation that can be overridded in the subcalss or generated code.
            </summary>
            <returns>A Dictionary from string property name to property value.</returns>
        </member>
        <member name="M:Orleans.GrainState.SetAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates this property bag from a dictionary.
            This is a default Reflection-based implemenation that can be overridded in the subcalss or generated code.
            </summary>
            <param name="values">The Dictionary from string to object that contains the values
            for this property bag.</param>
        </member>
        <member name="M:Orleans.GrainState.ResetProperties">
            <summary>
            Resets properties of the state object to their default values.
            </summary>
        </member>
        <member name="P:Orleans.GrainState.Etag">
            <summary>
            Opaque value set by the storage provider representing an 'Etag' setting for the last time the state data was read from backing store.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain interface as part of the client-side code generation.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(Orleans.Runtime.IAddressable,System.Int32,System.Int32,System.Object[])">
            <summary>
            Invoke a grain method.
            Invoker classes in generated code implement this method to provide a method call jump-table to map invoke data to a strongly typed call to the correct method on the correct interface.
            </summary>
            <param name="grain">Reference to the grain to be invoked.</param>
            <param name="interfaceId">Interface id of the method to be called.</param>
            <param name="methodId">Method id of the method to be called.</param>
            <param name="arguments">Arguments to be passed to the method being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="P:Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId">
            <summary> The interface id that this invoker supports. </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.IGrainExtensionMethodInvoker">
            <summary>
            An implementation of this interface is generated for every grain extension as part of the client-side code generation.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.IGrainExtensionMethodInvoker.Invoke(Orleans.Runtime.IGrainExtension,System.Int32,System.Int32,System.Object[])">
            <summary>
            Invoke a grain extension method.
            </summary>
            <param name="extension">Reference to the extension to be invoked.</param>
            <param name="interfaceId">Interface id of the method to be called.</param>
            <param name="methodId">Method id of the method to be called.</param>
            <param name="arguments">Arguments to be passed to the method being invoked.</param>
            <returns>Value promise for the result of the method invoke.</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitNames">
            <summary>
            Class containing key names for the configurable LimitValues used by Orleans runtime.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitValue">
            <summary>
            Data class encapsulating details of a particular system limit.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.Name">
            <summary>
            Name of this Limit value
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.SoftLimitThreshold">
            <summary>
            'Soft" limit threshold value for this Limit, after which Warnings will start to be generated
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.LimitValue.HardLimitThreshold">
            <summary>
            'Hard' limit threshold value, after which Errors will start to be generated and action take (for example, rejecting new request messages, etc) 
            to actively reduce the limit value back to within thresholds.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.OrleansException">
            <summary>
            An exception class used by the Orleans runtime for reporting errors.
            </summary>
            <remarks>
            This is also the base class for any more specific exceptions 
            raised by the Orleans runtime.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GatewayTooBusyException">
            <summary>
            Signifies that a gateway silo is currently in overloaded / load shedding state 
            and is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is usaully a transient condition.
            The message is likely to be accepted by this or another gateway if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.LimitExceededException">
            <summary>
            Signifies that a silo is in an overloaded state where some 
            runtime limit setting is currently being exceeded, 
            and so that silo is unable to currently accept this message being sent.
            </summary>
            <remarks>
            This situation is often a transient condition.
            The message is likely to be accepted by this or another silo if it is retransmitted at a later time.
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.DeadlockException">
            <summary>
            Signifies that a silo has detected a deadlock / loop in a call graph.
            </summary>
            <remarks>
            <para>
            Deadlock detection is not enabled by default in Orleans silos, 
            because it introduces some extra overhead in call handling.
            </para>
            <para>
            There are some constraints on the types of deadlock that can currently be detected 
            by Orleans silos.
            </para>
            </remarks>
        </member>
        <member name="T:Orleans.Runtime.GrainExtensionNotInstalledException">
            <summary>
            Signifies that an attempt was made to invoke a grain extension method on a grain where that extension was not installed.
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.ClearStateAsync">
            <summary>
            Async method to cause the current grain state data to be cleared and reset. 
            This will usually mean the state record is deleted from backing store, but the specific behavior is defined by the storage provider instance configured for this grain.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always delete".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            If Etags do not match, then this operation will fail; Set Etag = <c>null</c> to indicate "always overwrite".
            </summary>
        </member>
        <member name="M:Orleans.Core.IStorage.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.ReadStateAsync">
            <summary>
            Async method to cause refresh of the current grain state data from backing store.
            Any previous contents of the grain state data will be overwritten.
            </summary>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.WriteStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="M:Orleans.Core.GrainStateStorageBridge.ClearStateAsync">
            <summary>
            Async method to cause write of the current grain state data into backing store.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GuidId">
            <summary>
            Wrapper object around Guid.
            Can be used in places where Guid is optional and in those cases it can be set to null and will not use the storage of an empty Guid struct.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayManager">
            <summary>
            The GatewayManager class holds the list of known gateways, as well as maintaining the list of "dead" gateways.
            
            The known list can come from one of two places: the full list may appear in the client configuration object, or 
            the config object may contain an IGatewayListProvider delegate. If both appear, then the delegate takes priority.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListListener">
            <summary>
            A listener interface for optional GatewayList notifications provided by the IGatewayListObservable interface.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.GatewayManager.GetLiveGateway">
            <summary>
            Selects a gateway to use for a new bucket. 
            
            Note that if a list provider delegate was given, the delegate is invoked every time this method is called. 
            This method performs caching to avoid hammering the ultimate data source.
            
            This implementation does a simple round robin selection. It assumes that the gateway list from the provider
            is in the same order every time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.IControllable">
            <summary>
            A general interface for controllable components inside Orleans runtime.
            </summary>
        </member>
        <member name="M:Orleans.Providers.IControllable.ExecuteCommand(System.Int32,System.Object)">
            <summary>
            A function to execute a control command.
            </summary>
            <param name="command">A serial number of the command.</param>
            <param name="arg">An opaque command argument</param>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.AdoNetInvariants">
            <summary>
            A holder for well known, vendor specific connector class invariant names.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNameSqlServer">
            <summary>
            Microsoft SQL Server invariant name string.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNameOracleDatabase">
            <summary>
            Oracle Database server invariant name string.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNameSqlLite">
            <summary>
            SQLite invariant name string.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNameMySql">
            <summary>
            MySql invariant name string.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNamePostgreSql">
            <summary>
            PostgreSQL invariant name string.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.NameKey">
            <summary>
            A key for a well known constant, likely set by a database connector vendor.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.DescriptionKey">
            <summary>
            A key for a well known constant, likey set by a database connector vendor.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantNameKey">
            <summary>
            A key for a well known constant, likely set by a database connector vendor.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.AssemblyQualifiedNameKey">
            <summary>
            A key for a well known constant, likely set by a database connector vendor.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.AdoNetInvariants.InvariantParameterIndicator">
            <summary>
            A parameter indicator that can be used in queries which is then substituted according to the
            underlying database.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.QueryConstantsBag">
            <summary>
            This class holds a bag of operational constants Orleans uses, such as queries.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryConstantsBag.constants">
            <summary>
            The loaded query constants by database invariant key and query key.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.QueryConstantsBag.#ctor">
            <summary>
            A default constructor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.QueryConstantsBag.GetAllConstants(System.String)">
            <summary>
            Gets all of the loaded constants for a given invariant.
            </summary>
            <param name="invariantName">The name of the invariant.</param>
            <returns>All querys by their keys for a given invariant.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.QueryConstantsBag.GetConstant(System.String,System.String)">
            <summary>
            Gets a constant from the bag of constants.
            </summary>
            <param name="invariantName">The invariant for which to get the constant.</param>
            <param name="key">The key with which to get the constant.</param>
            <returns>A constant with the given parameters.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.QueryConstantsBag.AddOrModifyQueryConstant(System.String,System.String,System.String)">
            <summary>
            Adds data to query constants or modifies it.
            </summary>
            <param name="invariantName">A well known database provider invariant name.</param>
            <param name="key">One of the keys used storing the constant.</param>
            <param name="value">The value to add.</param>
            <returns><em>TRUE</em> if the value was added, <em>FALSE</em> if modified.</returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.RelationalVendorConstants">
            <summary>
            These are keys for vendor dependent constants.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalVendorConstants.ParameterIndicatorKey">
            <summary>
            The character that indicates a parameter.
            </summary>
            <remarks>Vendor specific.</remarks>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalVendorConstants.StartEscapeIndicatorKey">
            <summary>
            The character that indicates a start escape key for columns and tables that are reserved words.
            </summary>
            <remarks>Vendor specific.</remarks>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalVendorConstants.EndEscapeIndicatorKey">
            <summary>
            The character that indicates an end escape key for columns and tables that are reserved words.
            </summary>
            <remarks>Vendor specific.</remarks>
        </member>
        <member name="T:Orleans.Runtime.IGrainRuntime">
            <summary>
            The gateway of the <see cref="T:Orleans.Grain"/> to the Orleans runtime. The <see cref="T:Orleans.Grain"/> should only interact with the runtime through this interface.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.ServiceId">
            <summary>
            Provides the ServiceId this cluster is running as.
            ServiceId's are intended to be long lived Id values for a particular service which will remain constant 
            even if the service is started / redeployed multiple times during its operations life.
            </summary>
            <returns>ServiceID Guid for this service.</returns>
        </member>
        <member name="P:Orleans.Runtime.IGrainRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IAddressable">
            <summary>
            Marker interface for addressable endpoints, such as grains, observers, and other system-internal addressable endpoints
            </summary>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoader.LoadAssemblies(System.Collections.Generic.Dictionary{System.String,System.IO.SearchOption},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderPathNameCriterion},System.Collections.Generic.IEnumerable{Orleans.Runtime.AssemblyLoaderReflectionCriterion},Orleans.Runtime.TraceLogger)">
            <summary>
            Loads assemblies according to caller-defined criteria.
            </summary>
            <param name="dirEnumArgs">A list of arguments that are passed to Directory.EnumerateFiles(). 
                The sum of the DLLs found from these searches is used as a base set of assemblies for
                criteria to evaluate.</param>
            <param name="pathNameCriteria">A list of criteria that are used to disqualify
                assemblies from being loaded based on path name alone (e.g.
                AssemblyLoaderCriteria.ExcludeFileNames) </param>
            <param name="reflectionCriteria">A list of criteria that are used to identify
                assemblies to be loaded based on examination of their ReflectionOnly type
                information (e.g. AssemblyLoaderCriteria.LoadTypesAssignableFrom).</param>
            <param name="logger">A logger to provide feedback to.</param>
            <returns>List of discovered assembly locations</returns>
        </member>
        <member name="T:Orleans.Storage.IMemoryStorageGrain">
            <summary>
            Grain interface for internal memory storage grain used by Orleans in-memory storage provider.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Int64"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrain">
            <summary>
            Marker interface for grains
            </summary>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.ReadStateAsync(System.String,System.String)">
            <summary>
            Async method to cause retrieval of the specified grain state data from memory store.
            </summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainId">Grain id for this grain.</param>
            <returns>Value promise for the currently stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.WriteStateAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Async method to cause update of the specified grain state data into memory store.
            </summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainId">Grain id for this grain.</param>
            <param name="grainState">New state data to be stored for this grain.</param>
            <returns>Completion promise for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IMemoryStorageGrain.DeleteStateAsync(System.String,System.String)">
            <summary>
            Async method to cause deletion of the specified grain state data from memory store.
            </summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainId">Grain id for this grain.</param>
            <returns>Completion promise for the update operation for stored grain state for the specified grain.</returns>
        </member>
        <member name="T:Orleans.Runtime.UniqueKey.Category">
            <summary>
            Type id values encoded into UniqueKeys
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called once all measures to deliver an event to a consumer have been exhausted.
            </summary>
            <param name="subscriptionId"></param>
            <param name="streamProviderName"></param>
            <param name="streamIdentity"></param>
            <param name="sequenceToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.NoOpStreamDeliveryFailureHandler.OnDeliveryFailure(Orleans.Runtime.GuidId,System.String,Orleans.Streams.IStreamIdentity,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Should be called when an event could not be delivered to a consumer, after exhausting retry attempts.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamEventDeliveryFailureException">
            <summary>
            This exception indicates that a stream event was not successfully delivered to the consumer.
            </summary>
        </member>
        <member name="T:Orleans.Streams.FaultedSubscriptionException">
            <summary>
            This exception indicates that an error has occured on a stream subscription that has placed the subscription into
             a faulted state.  Work on faulted subscriptions should be abandoned.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.DbExtensions">
            <summary>
            Contains some convenience methods to use in conjunction with <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage">IRelationalStorage</see> and <see cref="T:Orleans.Runtime.Storage.Relational.RelationalStorage">GenericRelationalStorage</see>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.DbExtensions.typeMap">
            <summary>
            An explicit map of type CLR viz database type conversions.
            </summary>
            <summary>
            An explicit map of type CLR viz database type conversions.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DbExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Returns a value if it is not <see cref="T:System.DBNull"/>, <em>default(TValue)</em> otherwise.
            </summary>
            <typeparam name="TValue">The type of the value to request.</typeparam>
            <param name="record">The record from which to retrieve the value.</param>
            <param name="fieldName">The name of the field to retrieve.</param>
            <param name="@default">The default value if value in position is <see cref="T:System.DBNull"/>.</param>
            <returns>Either the given value or the default for the requested type.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <remarks>This function throws if the given <see paramref="fieldName"/> does not exist.</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DbExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Returns a value if it is not <see cref="T:System.DBNull"/>, <em>default(TValue)</em> otherwise.
            </summary>
            <typeparam name="TValue">The type of the value to request.</typeparam>
            <param name="record">The record from which to retrieve the value.</param>
            <param name="ordinal">The ordinal of the fieldname.</param>
            <param name="@default">The default value if value in position is <see cref="T:System.DBNull"/>.</param>
            <returns>Either the given value or the default for the requested type.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <remarks>This function throws if the given <see paramref="fieldName"/> does not exist.</remarks>        
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DbExtensions.GetValue``1(System.Data.IDataRecord,System.String)">
            <summary>
            Returns a value with the given <see paramref="fieldName"/>.
            </summary>
            <typeparam name="TValue">The type of value to retrieve.</typeparam>
            <param name="record">The record from which to retrieve the value.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>Value in the given field indicated by <see paramref="fieldName"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <remarks>This function throws if the given <see paramref="fieldName"/> does not exist.</remarks>        
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionParameterProvider``1(System.Data.IDbCommand,``0,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds given parameters to a command using reflection.
            </summary>
            <typeparam name="T">The type of the parameters.</typeparam>
            <param name="command">The command.</param>
            <param name="parameters">The parameters.</param>
            <param name="nameMap">Maps a given property name to another one defined in the map.</param>
            <remarks>Does not support collection parameters currently. Does not cache reflection results.</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionSelector``1(System.Data.IDataRecord)">
            <summary>
            Creates object of the given type from the results of a query.
            </summary>
            <typeparam name="TResult">The type to construct.</typeparam>
            <param name="record">The record from which to read the results.</param>
            <returns>And object of type <see typeparam="TResult"/>.</returns>
            <remarks>Does not support <see typeparam="TResult"/> of type <em>dynamic</em>.</remarks>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.DictionaryExtensions">
            <summary>
            Extensions methods to work with dictionaries.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value or a default for the given type if not found.
            </summary>
            <typeparam name="TKey">The type of a key with which to search for.</typeparam>
            <typeparam name="TValue">The type of a value which to return.</typeparam>
            <param name="dictionary">The dictionary from which to search from.</param>
            <param name="key">The key with which to search.</param>
            <returns>The found object or <em>default(TValue)</em>.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value or a default for the given type if not found.
            </summary>
            <typeparam name="TKey">The type of a key with which to search for.</typeparam>
            <typeparam name="TValue">The type of a value which to return.</typeparam>
            <param name="dictionary">The dictionary from which to search from.</param>
            <param name="key">The key with which to search.</param>
            <param name="defaultProvider">A provider for a default value if the value was not found.</param>
            <returns>The found object or value as defined by <see paramref="defaultProvider"/>.</returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.RelationalStorage">
            <summary>
            A general purpose class to work with a given relational database and ADO.NET provider.
            </summary>    
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.IRelationalStorage">
            <summary>
            A common interface for all relational databases.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.IRelationalStorage.ReadAsync``1(System.String,System.Action{System.Data.IDbCommand},System.Func{System.Data.IDataRecord,System.Int32,``0})">
             <summary>
             Executes a given statement. Especially intended to use with <em>SELECT</em> statement.
             </summary>
             <typeparam name="TResult">The result type.</typeparam>
             <param name="query">The query to execute.</param>
             <param name="parameterProvider">Adds parameters to the query. The parameters must be in the same order with same names as defined in the query.</param>
             <param name="selector">This function transforms the raw <see cref="T:System.Data.IDataRecord"/> results to type <see paramref="TResult"/> the <see cref="T:System.Int32"/> parameter being the resultset number.</param>
             <returns>A list of objects as a result of the <see paramref="query"/>.</returns>
             <example>This sample shows how to make a hand-tuned database call.
             <code>
             //This struct holds the return value in this example.
             public struct Information
             {
                 public string TABLE_CATALOG { get; set; }
                 public string TABLE_NAME { get; set; }
             }
            
             //Here are defined two queries. There can be more than two queries, in which case
             //the result sets are differentiated by a count parameter. Here the queries are
             //SELECT clauses, but they can be whatever, even mixed ones.
             IEnumerable&lt;Information&gt; ret =
                 await storage.ReadAsync&lt;Information&gt;("SELECT * FROM INFORMATION_SCHEMA.TABLES; SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @tp1", command =&gt;
             {
                 //Parameters are added and created like this.
                 //They are database vendor agnostic.
                 var tp1 = command.CreateParameter();
                 tp1.ParameterName = "tp1";
                 tp1.Value = "some test value";
                 tp1.DbType = DbType.String;
                 tp1.Direction = ParameterDirection.Input;
                 command.Parameters.Add(tp1);
                 
                 //The selector is used to select the results within the result set. In this case there are two homogenous
                 //result sets, so there is actually no need to check which result set the selector holds and it could
                 //marked with by convention by underscore (_).
             }, (selector, resultSetCount) =&gt;
                {
                    //This function is called once for each row returned, so the final result will be an
                    //IEnumerable&lt;Information&gt;.
                    return new Information
                    {
                        TABLE_CATALOG = selector.GetValueOrDefault&lt;string&gt;("TABLE_CATALOG"),
                        TABLE_NAME = selector.GetValueOrDefault&lt;string&gt;("TABLE_NAME")
                    }               
            }).ConfigureAwait(continueOnCapturedContext: false);                
             </code>        
             </example>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.IRelationalStorage.ExecuteAsync(System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes a given statement. Especially intended to use with <em>INSERT</em>, <em>UPDATE</em>, <em>DELETE</em> or <em>DDL</em> queries.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="parameterProvider">Adds parameters to the query. Parameter names must match those defined in the query.</param>
            <returns>Affected rows count.</returns>
            <example>This sample shows how to make a hand-tuned database call.
            <code>
            //In contract to reading, execute queries are simpler as they return only
            //the affected rows count if it is available.
            var query = ""IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'Test') CREATE TABLE Test(Id INT PRIMARY KEY IDENTITY(1, 1) NOT NULL);"
            int affectedRowsCount = await storage.ExecuteAsync(query, command =>
            {
                //There aren't parameters here, but they'd be added like when reading.
                //As the affected rows count is the only thing returned, there isn't
                //facilities to read anything.
            }).ConfigureAwait(continueOnCapturedContext: false);                
            </code>
            </example>
        </member>
        <member name="P:Orleans.Runtime.Storage.Relational.IRelationalStorage.InvariantName">
            <summary>
            The well known invariant name of the underlying database.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Storage.Relational.IRelationalStorage.ConnectionString">
            <summary>
            The connection string used to connecto the database.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorage.connectionString">
            <summary>
            The connection string to use.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorage.invariantName">
            <summary>
            The invariant name of the connector for this database.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorage.factory">
            <summary>
            The factory to provide vendor specific functionality.
            </summary>
            <remarks>For more about <see href="http://florianreischl.blogspot.fi/2011/08/adonet-connection-pooling-internals-and.html">ConnectionPool</see>
            and issues with using this factory. Take these notes into account when considering robustness of Orleans!</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorage.CreateInstance(System.String,System.String)">
            <summary>
            Creates an instance of a database of type <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/>.
            </summary>
            <param name="invariantName">The invariant name of the connector for this database.</param>
            <param name="connectionString">The connection string this database should use for database operations.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorage.ReadAsync``1(System.String,System.Action{System.Data.IDbCommand},System.Func{System.Data.IDataRecord,System.Int32,``0})">
             <summary>
             Executes a given statement. Especially intended to use with <em>SELECT</em> statement.
             </summary>
             <typeparam name="TResult">The result type.</typeparam>
             <param name="query">Executes a given statement. Especially intended to use with <em>SELECT</em> statement.</param>        
             <param name="parameterProvider">Adds parameters to the query. Parameter names must match those defined in the query.</param>
             <param name="selector">This function transforms the raw <see cref="T:System.Data.IDataRecord"/> results to type <see paramref="TResult"/> the <see cref="T:System.Int32"/> parameter being the resultset number.</param>
             <returns>A list of objects as a result of the <see paramref="query"/>.</returns>
             <example>This sample shows how to make a hand-tuned database call.
             <code>
             //This struct holds the return value in this example.
             public struct Information
             {
                 public string TABLE_CATALOG { get; set; }
                 public string TABLE_NAME { get; set; }
             }
            
             //Here are defined two queries. There can be more than two queries, in which case
             //the result sets are differentiated by a count parameter. Here the queries are
             //SELECT clauses, but they can be whatever, even mixed ones.
             IEnumerable&lt;Information&gt; ret =
                 await storage.ReadAsync&lt;Information&gt;("SELECT * FROM INFORMATION_SCHEMA.TABLES; SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @tp1", command =&gt;
             {
                 //Parameters are added and created like this.
                 //They are database vendor agnostic.
                 var tp1 = command.CreateParameter();
                 tp1.ParameterName = "tp1";
                 tp1.Value = "some test value";
                 tp1.DbType = DbType.String;
                 tp1.Direction = ParameterDirection.Input;
                 command.Parameters.Add(tp1);
                 
                 //The selector is used to select the results within the result set. In this case there are two homogenous
                 //result sets, so there is actually no need to check which result set the selector holds and it could
                 //marked with by convention by underscore (_).
             }, (selector, resultSetCount) =&gt;
                {
                    //This function is called once for each row returned, so the final result will be an
                    //IEnumerable&lt;Information&gt;.
                    return new Information
                    {
                        TABLE_CATALOG = selector.GetValueOrDefault&lt;string&gt;("TABLE_CATALOG"),
                        TABLE_NAME = selector.GetValueOrDefault&lt;string&gt;("TABLE_NAME")
                    }               
            }).ConfigureAwait(continueOnCapturedContext: false);                
             </code>
             </example>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorage.ExecuteAsync(System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes a given statement. Especially intended to use with <em>INSERT</em>, <em>UPDATE</em>, <em>DELETE</em> or <em>DDL</em> queries.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="parameterProvider">Adds parameters to the query. Parameter names must match those defined in the query.</param>
            <returns>Affected rows count.</returns>
            <example>This sample shows how to make a hand-tuned database call.
            <code>
            //In contract to reading, execute queries are simpler as they return only
            //the affected rows count if it is available.
            var query = ""IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Test') CREATE TABLE Test(Id INT PRIMARY KEY IDENTITY(1, 1) NOT NULL);"
            int affectedRowsCount = await storage.ExecuteAsync(query, command =>
            {
                //There aren't parameters here, but they'd be added like when reading.
                //As the affected rows count is the only thing returned, there isn't
                //facilities to read anything.
            }).ConfigureAwait(continueOnCapturedContext: false);                
            </code>
            </example>
        </member>
        <member name="P:Orleans.Runtime.Storage.Relational.RelationalStorage.InvariantName">
            <summary>
            The invariant name of the connector for this database.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Storage.Relational.RelationalStorage.ConnectionString">
            <summary>
            The connection string used to connecto the database.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.QueryKeys">
            <summary>
            Keys to operational queries Orleans uses to operate a given relational database.
            These keys point to queries loaded from the database when starting up.
            </summary>
            <remarks>These keys point to the only queries Orleans ever issues to the database.
            See file <em>CreateOrleansTables_SqlServer.sql</em> for further implementation details.</remarks>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.OrleansQueriesKey">
            <summary>
            This key defines the query to retrieve Orleans operational queries
            and fill in the queries matching the other keys.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.ActiveGatewaysQuery">
            <summary>
            A key for a query template to retrieve gateway URIs.
            </summary>        
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.MembershipReadRowKey">
            <summary>
            A key for a query template to retrieve a single row of membership data.
            </summary>        
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.MembershipReadAllKey">
            <summary>
            A key for a query template to retrieve all membership data.
            </summary>        
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.InsertMembershipVersionKey">
            <summary>
            A key for a query to insert a membership version row.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.UpdateIAmAlivetimeKey">
            <summary>
            A key for a query to update "I Am Alive Time".
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.InsertMembershipKey">
            <summary>
            A key for a query to insert a membership row.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.UpdateMembershipKey">
            <summary>
            A key for a query to update a membership row.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.DeleteMembershipTableEntriesKey">
            <summary>
            A key for a query to delete membersip entries.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.ReadReminderRowsKey">
            <summary>
            A key for a query to read reminder entries.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.ReadRangeRows1Key">
            <summary>
            A key for a query to read reminder entries with ranges.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.ReadRangeRows2Key">
            <summary>
            A key for a query to read reminder entries with ranges.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.ReadReminderRowKey">
            <summary>
            A key for a query to read a reminder entry with ranges.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.UpsertReminderRowKey">
            <summary>
            A key for a query to upsert a reminder row.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.InsertOrleansStatisticsKey">
            <summary>
            A key for a query to insert Orleans statistics.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.UpsertReportClientMetricsKey">
            <summary>
            A key for a query to insert or update an Orleans client metrics key.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.UpsertSiloMetricsKey">
            <summary>
            A key for a query to insert or update an Orleans silo metrics key.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.DeleteReminderRowKey">
            <summary>
            A key for a query to delete a reminder row.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.DeleteReminderRowsKey">
            <summary>
            A key for a query to delete all reminder rows.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.QueryKeys.Keys">
            <summary>
            A collection of the well known keys Orleans uses to retrieve operational database queries.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions">
            <summary>
            Orleans specific, hand-crafted convenience queries for efficiency.
            </summary>
            <remarks>This is public only to be usable to the statistics providers. Not intended for public use otherwise.</remarks>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.InsertStatisticsMultiupdateColumns">
            <summary>
            When inserting statistics and generating a batch insert clause, these are the columns in the statistics
            table that will be updated with multiple values. The other ones are updated with one value only.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.UpsertSiloMetricsAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.String,System.Net.IPEndPoint,Orleans.Runtime.SiloAddress,System.String,Orleans.Runtime.ISiloPerformanceMetrics)">
            <summary>
            Either inserts or updates a silo metrics row.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment ID.</param>
            <param name="siloId">The silo ID.</param>
            <param name="gateway">The gateway information.</param>
            <param name="siloAddress">The silo address information.</param>
            <param name="hostName">The hostname.</param>
            <param name="siloMetrics">The silo metrics to be either updated or inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.UpsertReportClientMetricsAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.String,System.Net.IPAddress,System.String,Orleans.Runtime.IClientPerformanceMetrics)">
            <summary>
            Either inserts or updates a silo metrics row. 
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment ID.</param>
            <param name="clientId">The client ID.</param>
            <param name="clientAddress">The client address information.</param>
            <param name="hostName">The hostname.</param>
            <param name="clientMetrics">The client metrics to be either updated or inserted.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.InsertStatisticsCountersAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Orleans.Runtime.ICounter})">
            <summary>
            Inserts the given statistics counters to the Orleans database.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment ID.</param>
            <param name="hostName">The hostname.</param>
            <param name="siloOrClientName">The silo or client name.</param>
            <param name="id">The silo address or client ID.</param>
            <param name="counters">The counters to be inserted.</param>        
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.ReadReminderRowsAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.Runtime.GrainReference)">
            <summary>
            Reads Orleans reminder data from the tables.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="serviceId">The service ID.</param>
            <param name="grainref">The grain reference (ID).</param>
            <returns>Reminder table data.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.ReadReminderRowsAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Reads Orleans reminder data from the tables.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="serviceId">The service ID.</param>
            <param name="beginHash">The begin hash.</param>
            <param name="endHash">The end hash.</param>
            <returns>Reminder table data.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.ReadReminderRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.Runtime.GrainReference,System.String)">
            <summary>
            Reads one row of reminder data.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="grainref">The grain reference (ID).</param>
            <param name="reminderName">The reminder name to retrieve.</param>
            <returns>A remainder entry.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.UpsertReminderRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.Runtime.GrainReference,System.String,System.DateTime,System.TimeSpan)">
            <summary>
            Either inserts or updates a reminder row.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="serviceId">The service ID.</param>
            <param name="grainref">The grain reference (ID).</param>
            <param name="reminderName">The reminder name to retrieve.</param>
            <returns>The new etag of the either or updated or inserted reminder row.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.DeleteReminderRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.Runtime.GrainReference,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="query">The query to use.</param>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            <param name="etag"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.DeleteReminderRowsAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="query">The query to use.</param>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.ActiveGatewaysAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String)">
            <summary>
            Lists active gateways. Used mainly by Orleans clients.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment for which to query the gateways.</param>
            <returns>The gateways for the silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.MembershipDataAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.Runtime.SiloAddress)">
            <summary>
            Queries Orleans membership data.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment for which to query data.</param>
            <param name="key">Silo data used as parameters in the query.</param>
            <returns>Membership table data.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.AllMembershipDataAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="query">The query to use.</param>
            <param name="deploymentId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.DeleteMembershipTableEntriesAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="query">The query to use.</param>
            <param name="deploymentId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.UpdateIAmAliveTimeAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.MembershipEntry)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="query">The query to use.</param>
            <param name="deploymentId"></param>
            <param name="membershipEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.InsertMembershipVersionRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.Int32)">
            <summary>
            Inserts a version row if one does not already exist.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment for which to query data.</param>
            <param name="version">The version information to insert.</param>
            <returns><em>TRUE</em> if a row was inserted. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.InsertMembershipRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Inserts a membership row if one does not already exist.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment with which to insert row.</param>
            <param name="membershipEntry">The membership entry data to insert.</param>
            <param name="version">The version data to insert.</param>
            <returns><em>TRUE</em> if insert succeeds. <em>FALSE</em> otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.OrleansRelationalExtensions.UpdateMembershipRowAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.String,System.String,Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Updates membership row data.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">The query to use.</param>
            <param name="deploymentId">The deployment with which to insert row.</param>
            <param name="etag">The etag of which to use to check if the membership data being updated is not stale.</param>
            <param name="membershipEntry">The membership data to used to update database.</param>
            <param name="version">The membership version used to update database.</param>
            <returns><em>TRUE</em> if update SUCCEEDS. <em>FALSE</em> ot</returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.Management.RelationalManagementExtensions">
            <summary>
            Contains some relational database management extension methods.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.Management.RelationalManagementExtensions.GetAdoNetFactoryData">
            <summary>
            Seeks for database provider factory classes from GAC or as indicated by
            the configuration file, see at <see href="https://msdn.microsoft.com/en-us/library/dd0w4a2z%28v=vs.110%29.aspx">Obtaining a DbProviderFactory</see>.
            </summary>
            <returns>Database constants with values from <see cref="T:System.Data.Common.DbProviderFactories"/>.</returns>
            <remarks>Every call may potentially update data as it is refreshed from <see cref="T:System.Data.Common.DbProviderFactories"/>.</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.Management.RelationalManagementExtensions.InitializeOrleansQueriesAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage)">
            <summary>
            Initializes Orleans queries from the database. Orleans uses only these queries and the variables therein, nothing more.
            </summary>
            <param name="storage">The storage to use.</param>
            <returns>Orleans queries have been loaded to silo or client memory.</returns>
            <remarks>This is public only to be usable to the statistics providers. Not intended for public use otherwise.</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.Management.RelationalManagementExtensions.CreateTransactionScope(Orleans.Runtime.Storage.Relational.IRelationalStorage)">
            <summary>
            Creates a transaction scope in which the storage operates.
            </summary>
            <param name="storage">The storage object.</param>
            <returns>Returns a default transaction scope for the given storage.</returns>
            <remarks>Does not set <c>System.Transactions.TransactionScopeAsyncFlowOption.Enabled">TransactionScopeAsyncFlowOption</c>as it is .NET 4.5.1.
            This is required to support transaction scopes in async-await type of flows.</remarks>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.Management.RelationalManagementExtensions.CreateNewStorageInstance(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String)">
            <summary>
            Creates a new instance of the storage based on the old connection string by changing the database name.
            </summary>
            <param name="storage">The old storage instance connectionstring of which to base the new one.</param>
            <param name="newDatabaseName">Connection string instance name of the database.</param>
            <returns>A new <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/> instance with having the same connection string as <paramref name="storage"/>but with with a new databaseName.</returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions">
            <summary>
            Convenienience functions to work with objects of type <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/>.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.sqlFormatProvider">
            <summary>
            Used to format .NET objects suitable to relational database format.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.indexedParameterTemplate">
            <summary>
            This is a template to produce query parameters that are indexed.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.queryConstants">
            <summary>
            This is used to acquire some constants that change rarely if ever.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.ExecuteMultipleInsertIntoAsync``1(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Executes a multi-record insert query clause with <em>SELECT UNION ALL</em>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storage">The storage to use.</param>
            <param name="tableName">The table name to against which to execute the query.</param>
            <param name="parameters">The parameters to insert.</param>
            <param name="nameMap">If provided, maps property names from <typeparamref name="T"/> to ones provided in the map.</param>
            <param name="onlyOnceColumns">If given, SQL parameter values for the given <typeparamref name="T"/> property types are generated only once. Effective only when <paramref name="useSqlParams"/> is <em>TRUE</em>.</param>
            <param name="useSqlParams"><em>TRUE</em> if the query should be in parameterized form. <em>FALSE</em> otherwise.</param>
            <returns>The rows affected.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.ReadAsync``1(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.Object)">
            <summary>
            Uses <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/> with <see cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionParameterProvider``1(System.Data.IDbCommand,``0,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="storage">The storage to use.</param>
            <param name="query">Executes a given statement. Especially intended to use with <em>SELECT</em> statement, but works with other queries too.</param>
            <param name="parameters">Adds parameters to the query. Parameter names must match those defined in the query.</param>
            <returns>A list of objects as a result of the <see paramref="query"/>.</returns>
            <example>This uses reflection to read results and match the parameters.
            <code>
            //This struct holds the return value in this example.        
            public struct Information
            {
                public string TABLE_CATALOG { get; set; }
                public string TABLE_NAME { get; set; }
            }
            
            //Here reflection (<seealso cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionParameterProvider``1(System.Data.IDbCommand,``0,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})"/>)
            is used to match parameter names as well as to read back the results (<seealso cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionSelector``1(System.Data.IDataRecord)"/>).
            var query = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @tname;";
            IEnumerable&lt;Information&gt; informationData = await db.ReadAsync&lt;Information&gt;(query, new { tname = 200000 });
            </code>
            </example>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.ReadAsync``1(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String)">
            <summary>
            Uses <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/> with <see cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionParameterProvider``1(System.Data.IDbCommand,``0,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">DbExtensions.ReflectionParameterProvider</see>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="storage">The storage to use.</param>
            <param name="query">Executes a given statement. Especially intended to use with <em>SELECT</em> statement, but works with other queries too.</param>        
            <returns>A list of objects as a result of the <see paramref="query"/>.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.ExecuteAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String,System.Object)">
            <summary>
            Uses <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/> with <see cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionSelector``1(System.Data.IDataRecord)"/>.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">Executes a given statement. Especially intended to use with <em>INSERT</em>, <em>UPDATE</em>, <em>DELETE</em> or <em>DDL</em> queries.</param>
            <param name="parameters">Adds parameters to the query. Parameter names must match those defined in the query.</param>
            <returns>Affected rows count.</returns>
            <example>This uses reflection to provide parameters to an execute
            query that reads only affected rows count if available.
            <code>        
            //Here reflection (<seealso cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionParameterProvider``1(System.Data.IDbCommand,``0,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})"/>)
            is used to match parameter names as well as to read back the results (<seealso cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionSelector``1(System.Data.IDataRecord)"/>).
            var query = "IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @tname) CREATE TABLE Test(Id INT PRIMARY KEY IDENTITY(1, 1) NOT NULL);"
            await db.ExecuteAsync(query, new { tname = "test_table" });
            </code>
            </example>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageExtensions.ExecuteAsync(Orleans.Runtime.Storage.Relational.IRelationalStorage,System.String)">
            <summary>
            Uses <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/> with <see cref="M:Orleans.Runtime.Storage.Relational.DbExtensions.ReflectionSelector``1(System.Data.IDataRecord)"/>.
            </summary>
            <param name="storage">The storage to use.</param>
            <param name="query">Executes a given statement. Especially intended to use with <em>INSERT</em>, <em>UPDATE</em>, <em>DELETE</em> or <em>DDL</em> queries.</param>        
            <returns>Affected rows count.</returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.RelationalStorageUtilities">
            <summary>
            Utility functions to work with relational storage.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageUtilities.RemoveBatchSeparators(System.String)">
            <summary>
            Removes <em>GO</em> batch separators from the script and returns a series of scripts.
            </summary>
            <param name="sqlScript">The script from which to remove the separators.</param>
            <returns>Scripts without separators.</returns>
        </member>
        <member name="M:Orleans.Runtime.Storage.Relational.RelationalStorageUtilities.CreateGenericStorageInstance(System.String,System.String)">
            <summary>
            Creates an instance of a database of type <see cref="T:Orleans.Runtime.Storage.Relational.IRelationalStorage"/>.
            </summary>
            <param name="invariantName">The invariant name of the connector for this database.</param>
            <param name="connectionString">The connection string this database should use for database operations.</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.Storage.Relational.SqlFormatProvider">
            <summary>
            Formats .NET types appropriately for database consumption in non-parameterized queries.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IRuntimeClient">
            <summary>
            The IRuntimeClient interface defines a subset of the runtime API that is exposed to both silo and client.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.GetResponseTimeout">
            <summary>
            Get the current response timeout setting for this client.
            </summary>
            <returns>Response timeout value</returns>
        </member>
        <member name="M:Orleans.Runtime.IRuntimeClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Sets the current response timeout setting for this client.
            </summary>
            <param name="timeout">New response timeout value</param>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.InternalGrainFactory">
            <summary>
            Grain Factory to get and cast grain references.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.AppLogger">
            <summary>
            Provides client application code with access to an Orleans logger.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.Identity">
            <summary>
            A unique identifier for the current client.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IRuntimeClient.CurrentStorageProvider">
            <summary>
            Return the currently storage provider configured for this grain, or null if no storage provider configured for this grain.
            </summary>
            <exception cref="T:System.InvalidOperationException">If called from outside grain class</exception>
        </member>
        <member name="T:Orleans.Runtime.IGrainExtension">
            <summary>
            Marker interface for grain extensions, used by internal runtime extension endpoints
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StageAnalysis">
            <summary>
            Stage analysis, one instance should exist in each Silo
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetTotalCPU">
            <summary>
            get all cpu used by all types of threads
            </summary>
            <returns> milliseconds of total cpu time </returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetMaxWallClock">
            <summary>
            gets total wallclock which is the wallclock of the stage with maximum wallclock time
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetNumberOfRequests(System.String)">
            <summary>
            get number of requests for a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>number of requests</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetWallClockPerStagePerRequest(System.String)">
            <summary>
            get wall clock time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of wallclock time per request</returns>
        </member>
        <member name="M:Orleans.Runtime.StageAnalysis.GetCpuPerStagePerRequest(System.String)">
            <summary>
            get cpu time for a request of a stage
            </summary>
            <param name="stageName">name of a stage from thread tracking statistics</param>
            <returns>average milliseconds of cpu time per request</returns>
        </member>
        <member name="T:Orleans.GrainFactory">
            <summary>
            Factory for accessing grains.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.referenceCreators">
            <summary>
            The collection of <see cref="T:Orleans.IGrainObserver"/> <c>CreateObjectReference</c> delegates.
            </summary>
        </member>
        <member name="F:Orleans.GrainFactory.referenceDestoyers">
            <summary>
            The collection of <see cref="T:Orleans.IGrainObserver"/> <c>DeleteObjectReference</c> delegates.
            </summary>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Guid,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extention of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.GrainFactory.GetGrain``1(System.Int64,System.String,System.String)">
            <summary>
            Gets a reference to a grain.
            </summary>
            <typeparam name="TGrainInterface">The interface to get.</typeparam>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="keyExtension">The key extention of the grain.</param>
            <param name="grainClassNamePrefix">An optional class name prefix used to find the runtime type of the grain.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.GrainFactory.CreateObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Creates a reference to the provided <paramref name="obj"/>.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The object to create a reference to.</param>
            <returns>The reference to <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.DeleteObjectReference``1(Orleans.IGrainObserver)">
            <summary>
            Deletes the provided object reference.
            </summary>
            <typeparam name="TGrainObserverInterface">
            The specific <see cref="T:Orleans.IGrainObserver"/> type of <paramref name="obj"/>.
            </typeparam>
            <param name="obj">The reference being deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the work performed.</returns>
        </member>
        <member name="M:Orleans.GrainFactory.MakeFactoryDelegate(System.Type,System.String,System.Type)">
            <summary>
            Creates a delegate for calling into the static method named <paramref name="methodName"/> on the generated
            factory for <paramref name="interfaceType"/>.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="methodName">The name of the static factory method.</param>
            <param name="delegateType">The type of delegate to create.</param>
            <returns>The created delegate.</returns>
        </member>
        <member name="T:Orleans.GrainExtensions">
            <summary>
            Extension methods for grains.
            </summary>
        </member>
        <member name="M:Orleans.GrainExtensions.AsReference``1(Orleans.Runtime.IAddressable)">
            <summary>
            Converts this grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to convert.</param>
            <returns>A strongly typed <c>GrainReference</c> of grain interface type TGrainInterface.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.Cast``1(Orleans.Runtime.IAddressable)">
            <summary>
            Casts a grain to a specific grain interface.
            </summary>
            <typeparam name="TGrainInterface">The type of the grain interface.</typeparam>
            <param name="grain">The grain to cast.</param>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKeyLong(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the long representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A long representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable,System.String@)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <param name="keyExt">The output paramater to return the extended key part of the grain primary key, if extened primary key was provided for that grain.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.GrainExtensions.GetPrimaryKey(Orleans.Runtime.IAddressable)">
            <summary>
            Returns the Guid representation of a grain primary key.
            </summary>
            <param name="grain">The grain to find the primary key for.</param>
            <returns>A Guid representing the primary key for this grain.</returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.GetMyRange">
            <summary>
            Get the responsibility range of the current silo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.SubscribeToRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Subscribe to receive range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Runtime.IConsistentRingProviderForGrains.UnSubscribeFromRangeChangeEvents(Orleans.Runtime.IAsyncRingRangeListener)">
            <summary>
            Unsubscribe from receiving range change notifications
            </summary>
            <param name="observer">An observer interface to receive range change notifications.</param>
            <returns>bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="M:Orleans.Runtime.IRingRange.InRange(System.UInt32)">
            <summary>
            Check if <paramref name="n"/> is our responsibility to serve
            </summary>
            <param name="id"></param>
            <returns>true if the reminder is in our responsibility range, false otherwise</returns>
        </member>
        <member name="M:Orleans.Runtime.SingleRange.InRange(System.UInt32)">
            <summary>
            checks if n is element of (Begin, End], while remembering that the ranges are on a ring
            </summary>
            <param name="n"></param>
            <returns>true if n is in (Begin, End], false otherwise</returns>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.Begin">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SingleRange.End">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion">
            <summary>
            A subsystem interested in loading additional assemblies passes an instance
            of AssemblyLoadCriterion to AssemblyLoader.QualifySearch to ensure that
            assemblies that meet a given criterion are loaded into memory.
            </summary>
            <typeparam name="T">AssemblyLoader.QualifySearch accepts two parameterizations
            of T: string and Assembly. When T is a string, the criterion is used to exclude
            assemblies by path name. When T is an Assembly, the criterion is used by
            AssemblyLoader to indicate which assemblies should be loaded. See
            AssemblyLoaderCritera for examples of both.</typeparam>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderCriterion.EvaluateCandidate(System.Object,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            AssemblyLoader invokes this wrapper for predicate when it needs to know whether an
            assembly is interesting to a subsystem that registered a criterion.
            </summary>
            <param name="complaint">The complaint, if the return value is *false*</param>
            <param name="candidate">The argument.</param>
            <returns>If T is a string, *false* indicates that the path name should be excluded from loading.
            If T is an assembly object, *true* indicates that the assembly should be loaded.</returns>
            <exception cref="T:System.InvalidOperationException">
            The predicate must provide a substantive complaint string if it returns *false*.</exception>
        </member>
        <member name="T:Orleans.Runtime.AssemblyLoaderCriterion.Predicate">
            <summary>
            An AssemblyLoadCriterion wraps a delegate where the predicate logic is implemented.
            </summary>
            <param name="complaint">If the candidate is not interesting to the subsystem that
            registered the criterion, the predicate must supply a complaint-- i.e. a message
            describing why the assembly wasn't interesting to the subsystem.</param>
            <param name="subject">This either an absolute path name in the case of exclusion
            criteria, or an Assembly object in the case of load criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.AssemblyPredicate)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="assemblyPredicate">A predicate which accepts an assembly an an argument. If this predicate returns true, the assembly will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate must provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="assemblyPredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaints">If no predicate provides a complaint, then these default complaints are logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>
        </member>
        <member name="M:Orleans.Runtime.AssemblyLoaderReflectionCriterion.NewCriterion(Orleans.Runtime.AssemblyLoaderReflectionCriterion.TypePredicate,System.String)">
            <summary>
            Create a new criterion that filters assemblies by predicate. 
            </summary>
            <param name="assemblyPredicate">A predicate which accepts a reflection-only type as an argument. If this predicate returns true, the assembly that provides the specified type will loaded and further inspection of the assembly with halt. If this predicate returns false, the predicate may provide a complaint explaining why the assembly does not meet the criterion described by the predicate.</param>
            <param name="defaultComplaints">If no predicate provides a complaint, then this default complaint is logged instead.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblyPredicate is null.</exception>        
        </member>
        <member name="T:Orleans.Providers.IProviderManager">
            <summary>
            Internal provider management interface for instantiating dependent providers in a hierarchical tree of dependencies
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderManager.GetProvider(System.String)">
            <summary>
            Call into Provider Manager for instantiating dependent providers in a hierarchical tree of dependencies
            </summary>
            <param name="name">Name of the provider to be found</param>
            <returns>Provider instance with the given name</returns>
        </member>
        <member name="T:Orleans.Providers.IProviderRuntime">
            <summary>
            Interface to allow callbacks from providers into their assigned provider-manager.
            This allows access to runtime functionality, such as logging.
            </summary>
            <remarks>
            Passed to the provider during IProvider.Init call to that provider instance.
            </remarks>
            <seealso cref="T:Orleans.Providers.IProvider"/>
        </member>
        <member name="M:Orleans.Providers.IProviderRuntime.GetLogger(System.String)">
            <summary>
            Provides a logger to be used by the provider. 
            </summary>
            <param name="loggerName">Name of the logger being requested.</param>
            <param name="logType">Type of the logger being requested.</param>
            <returns>Object reference to the requested logger.</returns>
            <seealso cref="T:Orleans.Runtime.TraceLogger.LoggerType"/>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.ServiceId">
            <summary>
            Provides the ServiceId this cluster is running as.
            ServiceId's are intended to be long lived Id values for a particular service which will remain constant 
            even if the service is started / redeployed multiple times during its operations life.
            </summary>
            <returns>ServiceID Guid for this service.</returns>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.SiloIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderRuntime.GrainFactory">
            <summary>
            Factory for getting references to grains.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IMessagingConfiguration">
            <summary>
            Specifies global messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResponseTimeout">
            <summary>
            The ResponseTimeout attribute specifies the default timeout before a request is assumed to have failed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxResendCount">
            <summary>
            The MaxResendCount attribute specifies the maximal number of resends of the same message.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ResendOnTimeout">
            <summary>
            The ResendOnTimeout attribute specifies whether the message should be automaticaly resend by the runtime when it times out on the sender.
            Default is false.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxSocketAge">
            <summary>
            The MaxSocketAge attribute specifies how long to keep an open socket before it is closed.
            Default is TimeSpan.MaxValue (never close sockets automatically, unles they were broken).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.DropExpiredMessages">
            <summary>
            The DropExpiredMessages attribute specifies whether the message should be dropped if it has expired, that is if it was not delivered 
            to the destination before it has timed out on the sender.
            Default is true.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.SiloSenderQueues">
            <summary>
            The SiloSenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo to send outbound
            messages (requests, responses, and notifications) to other silos.
            If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.GatewaySenderQueues">
            <summary>
            The GatewaySenderQueues attribute specifies the number of parallel queues and attendant threads used by the silo Gateway to send outbound
             messages (requests, responses, and notifications) to clients that are connected to it.
             If this attribute is not specified, then System.Environment.ProcessorCount is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.ClientSenderBuckets">
            <summary>
             The ClientSenderBuckets attribute specifies the total number of grain buckets used by the client in client-to-gateway communication
             protocol. In this protocol, grains are mapped to buckets and buckets are mapped to gateway connections, in order to enable stickiness
             of grain to gateway (messages to the same grain go to the same gateway, while evenly spreading grains across gateways).
             This number should be about 10 to 100 times larger than the expected number of gateway connections.
             If this attribute is not specified, then Math.Pow(2, 13) is used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.UseStandardSerializer">
            <summary>
            The UseStandardSerializer attribute, if provided and set to "true", forces the use of the standard .NET serializer instead
            of the custom Orleans serializer.
            This parameter is intended for use only for testing and troubleshooting.
            In production, the custom Orleans serializer should always be used because it performs significantly better.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolBufferSize">
            <summary>
            The size of a buffer in the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolMaxSize">
            <summary>
            The maximum size of the messaging buffer pool.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.BufferPoolPreallocationSize">
            <summary>
            The initial size of the messaging buffer pool that is pre-allocated.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.UseMessageBatching">
            <summary>
            Whether to use automatic batching of messages. Default is false.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.IMessagingConfiguration.MaxMessageBatchingSize">
            <summary>
            The maximum batch size for automatic batching of messages, when message batching is used.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.MessagingConfiguration">
            <summary>
            Messaging configuration that are common to client and silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.MessagingConfiguration.MaxForwardCount">
            <summary>
            The MaxForwardCount attribute specifies the maximal number of times a message is being forwared from one silo to another.
            Forwarding is used internally by the tuntime as a recovery mechanism when silos fail and the membership is unstable.
            In such times the messages might not be routed correctly to destination, and runtime attempts to forward such messages a number of times before rejecting them.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderConfiguration">
            <summary>
            Configuration for a particular provider instance.
            </summary>
        </member>
        <member name="T:Orleans.Providers.IProviderConfiguration">
            <summary>
            Configuration information that a provider receives
            </summary>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.SetProperty(System.String,System.String)">
            <summary>
            Set a property in this provider configuration.
            If the property with this key already exists, it is been overwritten with the new value, otherwise it is just added.
            </summary>
            <param name="key">The key of the property</param>
            <param name="val">The value of the property</param>
            <returns>Provider instance with the given name</returns>
        </member>
        <member name="M:Orleans.Providers.IProviderConfiguration.RemoveProperty(System.String)">
            <summary>
            Removes a property in this provider configuration.
            </summary>
            <param name="key">The key of the property.</param>
            <returns>True if the property was found and removed, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Type">
            <summary>
            Full type name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Name">
            <summary>
            Name of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Properties">
            <summary>
            Configuration properties for this provider instance, as name-value pairs.
            </summary>
        </member>
        <member name="P:Orleans.Providers.IProviderConfiguration.Children">
            <summary>
            Nested providers in case of a hierarchical tree of dependencies
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ProviderConfiguration.Properties">
            <summary>
            Properties of this provider.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ProviderConfiguration.Children">
            <summary>
            Children providers of this provider. Used by hierarchical providers.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ProviderCategoryConfiguration">
            <summary>
            Provider categoty configuration.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.StatisticsLevel">
            <summary>
            The level of runtime statistics to collect and report periodically.
            The default level is Info.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.IStatisticsConfiguration">
            <summary>
            Statistics Configuration that are common to client and silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ApplicationConfiguration">
            <summary>
            Orleans application configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="defaultCollectionAgeLimit">The default time period used to collect in-active activations.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.Load(System.Xml.XmlElement,Orleans.Runtime.TraceLogger)">
            <summary>
            Load this configuratin from xml element.
            </summary>
            <param name="xmlElement"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.GetCollectionAgeLimit(System.Type)">
            <summary>
            Returns the time period used to collect in-active activations of a given type.
            </summary>
            <param name="type">Grain type.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.GetCollectionAgeLimit(System.String)">
            <summary>
            Returns the time period used to collect in-active activations of a given type.
            </summary>
            <param name="type">Grain type full name.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetCollectionAgeLimit(System.Type,System.TimeSpan)">
            <summary>
            Sets the time period  to collect in-active activations for a given type.
            </summary>
            <param name="type">Grain type full name.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetCollectionAgeLimit(System.String,System.TimeSpan)">
            <summary>
            Sets the time period  to collect in-active activations for a given type.
            </summary>
            <param name="grainTypeFullName">Grain type full name string.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ResetCollectionAgeLimitToDefault(System.Type)">
            <summary>
            Resets the time period to collect in-active activations for a given type to a default value.
            </summary>
            <param name="type">Grain type full name.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ResetCollectionAgeLimitToDefault(System.String)">
            <summary>
            Resets the time period to collect in-active activations for a given type to a default value.
            </summary>
            <param name="type">Grain type full name string.</param>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.SetDefaultCollectionAgeLimit(System.TimeSpan)">
            <summary>
            Sets the default time period  to collect in-active activations for all grain type.
            </summary>
            <param name="ageLimit">The age limit to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ApplicationConfiguration.ToString">
            <summary>
            Prints the current application configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ApplicationConfiguration.DefaultCollectionAgeLimit">
            <summary>
            The default time period used to collect in-active activations.
            Applies to all grain types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ApplicationConfiguration.ClassSpecific">
            <summary>
            IEnumerable of all configurations for different grain types.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GrainTypeConfiguration">
            <summary>
            Grain type specific application configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Grain type of this configuration.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.#ctor(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="type">Grain type of this configuration.</param>
            <param name="ageLimit">Age limit for this type.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GrainTypeConfiguration.Load(System.Xml.XmlElement,Orleans.Runtime.TraceLogger)">
            <summary>
            Load this configuratin from xml element.
            </summary>
            <param name="xmlElement"></param>
            <param name="logger"></param>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.FullTypeName">
            <summary>
            The type of the grain of this configuration.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.AreDefaults">
            <summary>
            Whether this is a defualt configuration that applies to all grain types.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GrainTypeConfiguration.CollectionAgeLimit">
            <summary>
            The time period used to collect in-active activations of this type.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TypeCodeMapper">
            <summary>
            Type Code Mapping functions.
            </summary>
        </member>
        <member name="T:Orleans.IMembershipTable">
            <summary>
            Interface for Membership Table.
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.InitializeMembershipTable(Orleans.Runtime.Configuration.GlobalConfiguration,System.Boolean,Orleans.Runtime.TraceLogger)">
            <summary>
            Initializes the membership table, will be called before all other methods
            </summary>
            <param name="globalConfiguration">the give global configuration</param>
            <param name="tryInitTableVersion">whether an attempt will be made to init the underlying table</param>
            <param name="traceLogger">the logger used by the membership table</param>
        </member>
        <member name="M:Orleans.IMembershipTable.DeleteMembershipTableEntries(System.String)">
            <summary>
            Deletes all table entries of the given deploymentId
            </summary>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadRow(Orleans.Runtime.SiloAddress)">
            <summary>
            Atomically reads the Membership Table information about a given silo.
            The returned MembershipTableData includes one MembershipEntry entry for a given silo and the 
            TableVersion for this table. The MembershipEntry and the TableVersion have to be read atomically.
            </summary>
            <param name="entry">The address of the silo whose membership information needs to be read.</param>
            <returns>The membership information for a given silo: MembershipTableData consisting one MembershipEntry entry and
            TableVersion, read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.ReadAll">
            <summary>
            Atomically reads the full content of the Membership Table.
            The returned MembershipTableData includes all MembershipEntry entry for all silos in the table and the 
            TableVersion for this table. The MembershipEntries and the TableVersion have to be read atomically.
            </summary>
            <returns>The membership information for a given table: MembershipTableData consisting multiple MembershipEntry entries and
            TableVersion, all read atomically.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.InsertRow(Orleans.MembershipEntry,Orleans.TableVersion)">
            <summary>
            Atomically tries to insert (add) a new MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) New MembershipEntry will be added to the table.
            2) The newly added MembershipEntry will also be added with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, insert of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo already exist in the table
            2) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be inserted.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the insert operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateRow(Orleans.MembershipEntry,System.String,Orleans.TableVersion)">
            <summary>
            Atomically tries to update the MembershipEntry for one silo and also update the TableVersion.
            If operation succeeds, the following changes would be made to the table:
            1) The MembershipEntry for this silo will be updated to the new MembershipEntry (the old entry will be fully substitued by the new entry) 
            2) The eTag for the updated MembershipEntry will also be eTag with the new unique automatically generated eTag.
            3) TableVersion.Version in the table will be updated to the new TableVersion.Version.
            4) TableVersion etag in the table will be updated to the new unique automatically generated eTag.
            All those changes to the table, update of a new row and update of the table version and the associated etags, should happen atomically, or fail atomically with no side effects.
            The operation should fail in each of the following conditions:
            1) A MembershipEntry for a given silo does not exist in the table
            2) A MembershipEntry for a given silo exist in the table but its etag in the table does not match the provided etag.
            3) Update of the TableVersion failed since the given TableVersion etag (as specified by the TableVersion.VersionEtag property) did not match the TableVersion etag in the table.
            </summary>
            <param name="entry">MembershipEntry to be updated.</param>
            <param name="etag">The etag  for the given MembershipEntry.</param>
            <param name="tableVersion">The new TableVersion for this table, along with its etag.</param>
            <returns>True if the update operation succeeded and false otherwise.</returns>
        </member>
        <member name="M:Orleans.IMembershipTable.UpdateIAmAlive(Orleans.MembershipEntry)">
            <summary>
            Updates the IAmAlive part (column) of the MembershipEntry for this silo.
            This operation should only update the IAmAlive collumn and not change other columns.
            This operation is a "dirty write" or "in place update" and is performed without etag validation. 
            With regards to eTags update:
            This operation may automatically update the eTag associated with the given silo row, but it does not have to. It can also leave the etag not changed ("dirty write").
            With regards to TableVersion:
            this operation should not change the TableVersion of the table. It should leave it untouched.
            There is no scenario where this operation could fail due to table semantical reasons. It can only fail due to network problems or table unavailability.
            </summary>
            <param name="entry"></param>
            <returns>Task representing the successful execution of this operation. </returns>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListProvider">
            <summary>
            Interface that provides Orleans gateways information.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.InitializeGatewayListProvider(Orleans.Runtime.Configuration.ClientConfiguration,Orleans.Runtime.TraceLogger)">
            <summary>
            Initializes the provider, will be called before all other methods
            </summary>
            <param name="clientConfiguration">the given client configuration</param>
            <param name="traceLogger">the logger to be used by the provider</param>
        </member>
        <member name="M:Orleans.Messaging.IGatewayListProvider.GetGateways">
            <summary>
            Returns the list of gateways (silos) that can be used by a client to connect to Orleans cluster.
            The Uri is in the form of: "gwy.tcp://IP:port/Generation". See Utils.ToGatewayUri and Utils.ToSiloAddress for more details about Uri format.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.MaxStaleness">
            <summary>
            Specifies how often this IGatewayListProvider is refreshed, to have a bound on max staleness of its returned infomation.
            </summary>
        </member>
        <member name="P:Orleans.Messaging.IGatewayListProvider.IsUpdatable">
            <summary>
            Specifies whether this IGatewayListProvider ever refreshes its returned infomation, or always returns the same gw list.
            (currently only the static config based StaticGatewayListProvider is not updatable. All others are.)
            </summary>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.</returns>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.AsyncObservableExtensions.SubscribeAsync``1(Orleans.Streams.IAsyncObservable{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable using delegates.
            This method is a helper for the IAsyncObservable.SubscribeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onErrorAsync">Delegte that is called for IAsyncObserver.OnErrorAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumes consumption of a stream using delegates.
            This method is a helper for the StreamSubscriptionHandle.ResumeAsync allowing the subscribing class to inline the 
            handler methods instead of requiring an instance of IAsyncObserver.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="onCompletedAsync">Delegte that is called for IAsyncObserver.OnCompletedAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandleExtensions.ResumeAsync``1(Orleans.Streams.StreamSubscriptionHandle{``0},System.Func{``0,Orleans.Streams.StreamSequenceToken,System.Threading.Tasks.Task},Orleans.Streams.StreamSequenceToken)">
            <summary>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
            <param name="obs">The Observable object.</param>
            <param name="onNextAsync">Delegte that is called for IAsyncObserver.OnNextAsync.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="T:Orleans.Streams.GenericAsyncObserver`1">
            <summary>
            Class used by the IAsyncObservable extension methods to allow observation via delegate.
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="T:Orleans.Streams.IAsyncObserver`1">
            <summary>
            This interface generalizes the standard .NET IObserver interface to allow asynchronous production of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnNextAsync(`0,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next item to the consumer.
            <para>
            The Task returned from this method should be completed when the item's processing has been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            When the consumer is the (producer endpoint of) a stream, the Task is completed when the stream implementation
            has accepted responsibility for the item and is assured of meeting its delivery guarantees.
            For instance, a stream based on a durable queue would complete the Task when the item has been durably saved.
            A stream that provides best-effort at most once delivery would return a Task that is already complete.
            </para>
            <para>
            When the producer is the (consumer endpoint of) a stream, the Task should be completed by the consumer code
            when it has accepted responsibility for the item. 
            In particular, if the stream provider guarantees at-least-once delivery, then the item should not be considered
            delivered until the Task returned by the consumer has been completed.
            </para>
            </summary>
            <param name="item">The item to be passed.</param>
            <param name="token">The stream sequence token of this item.</param>
            <returns>A Task that is completed when the item has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnCompletedAsync">
            <summary>
            Notifies the consumer that the stream was completed.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <returns>A Task that is completed when the stream-complete operation has been accepted.</returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObserver`1.OnErrorAsync(System.Exception)">
            <summary>
            Notifies the consumer that the stream had an error.
            <para>
            The Task returned from this method should be completed when the consumer is done processing the stream closure.
            </para>
            </summary>
            <param name="ex">An Exception that describes the error that occured on the stream.</param>
            <returns>A Task that is completed when the close has been accepted.</returns>
        </member>
        <member name="T:Orleans.Streams.IAsyncObservable`1">
            <summary>
            This interface generalizes the standard .NET IObserveable interface to allow asynchronous consumption of items.
            Asynchronous here means that the consumer can process items asynchronously and signal item completion to the 
            producer by completing the returned Task.
            <para>
            Note that this interface is invoked (used) by item consumers and implemented by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object produced by the observable.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0})">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IAsyncObservable`1.SubscribeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken,Orleans.Streams.StreamFilterPredicate,System.Object)">
            <summary>
            Subscribe a consumer to this observable.
            </summary>
            <param name="observer">The asynchronous observer to subscribe.</param>
            <param name="token">The stream sequence to be used as an offset to start the subscription from.</param>
            <param name="filterFunc">Filter to be applied for this subscription</param>
            <param name="filterData">Data object that will be passed in to the filterFunc.
            This will usually contain any paramaters required by the filterFunc to make it's filtering decision.</param>
            <returns>A promise for a StreamSubscriptionHandle that represents the subscription.
            The consumer may unsubscribe by using this handle.
            The subscription remains active for as long as it is not explicitely unsubscribed.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied stream filter function is not suitable. 
            Usually this is because it is not a static method. </exception>
        </member>
        <member name="T:Orleans.Streams.IAsyncBatchObserver`1">
            <summary>
            This interface generalizes the IAsyncObserver interface to allow production and consumption of batches of items.
            <para>
            Note that this interface is implemented by item consumers and invoked (used) by item producers.
            This means that the producer endpoint of a stream implements this interface.
            </para>
            </summary>
            <typeparam name="T">The type of object consumed by the observer.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncBatchObserver`1.OnNextBatchAsync(System.Collections.Generic.IEnumerable{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Passes the next batch of items to the consumer.
            <para>
            The Task returned from this method should be completed when all items in the batch have been
            sufficiently processed by the consumer to meet any behavioral guarantees.
            </para>
            <para>
            That is, the semantics of the returned Task is the same as for <code>OnNextAsync</code>,
            extended for all items in the batch.
            </para>
            </summary>
            <param name="batch">The items to be passed.</param>
            <param name="token">The stream sequence token of this batch of items.</param>
            <returns>A Task that is completed when the batch has been accepted.</returns>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.Name">
            <summary>Name of the stream provider.</summary>
        </member>
        <member name="P:Orleans.Streams.IStreamProvider.IsRewindable">
            <summary>
            Determines whether this is a rewindable provider - supports creating rewindable streams 
            (streams that allow subscribing from previous point in time).
            </summary>
            <returns>True if this is a rewindable provider, false otherwise.</returns>
        </member>
        <member name="T:Orleans.Providers.IProvider">
            <summary>
            Base interface for all type-specific provider interfaces in Orleans
            </summary>
            <seealso cref="T:Orleans.Providers.IBootstrapProvider"/>
            <seealso cref="T:Orleans.Storage.IStorageProvider"/>
        </member>
        <member name="M:Orleans.Providers.IProvider.Init(System.String,Orleans.Providers.IProviderRuntime,Orleans.Providers.IProviderConfiguration)">
            <summary>
            Initialization function called by Orleans Provider Manager when a new provider class instance  is created
            </summary>
            <param name="name">Name assigned for this provider</param>
            <param name="providerRuntime">Callback for accessing system functions in the Provider Runtime</param>
            <param name="config">Configuration metadata to be used for this provider instance</param>
            <returns>Completion promise Task for the inttialization work for this provider</returns>
        </member>
        <member name="P:Orleans.Providers.IProvider.Name">
            <summary>The name of this provider instance, as given to it in the config.</summary>
        </member>
        <member name="T:Orleans.Streams.StreamSubscriptionHandle`1">
            <summary>
            Handle representing this subsription.
            Consumer may serialize and store the handle in order to unsubsribe later, for example
            in another activation on this grain.
            </summary>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.UnsubscribeAsync">
            <summary>
            Unsubscribe a stream consumer from this observable.
            </summary>
            <param name="handle">The stream handle to unsubscribe.</param>
            <returns>A promise to unsubscription action.
            </returns>
        </member>
        <member name="M:Orleans.Streams.StreamSubscriptionHandle`1.ResumeAsync(Orleans.Streams.IAsyncObserver{`0},Orleans.Streams.StreamSequenceToken)">
            <summary>
            Resumed consumption from a subscription to a stream.
            </summary>
            <param name="handle">The stream handle to consume from.</param>
            <returns>A promise with an updates subscription handle.
            </returns>
        </member>
        <member name="P:Orleans.Streams.StreamSubscriptionHandle`1.HandleId">
            <summary>
            Unique identifier for this StreamSubscriptionHandle
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalancer">
            <summary>
            The stream queue balancer is responsible for load balancing queues across all other related queue balancers.  It
            notifies any listeners (<code>IStreamQueueBalanceListener</code>) of changes to the distribution of queues.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.GetMyQueues">
            <summary>
            Retrieves the latest queue distribution for this balancer.
            </summary>
            <returns>Queue allocated to this balancer.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.SubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Subscribe to receive queue distribution change notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that subscription succeeded or not.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalancer.UnSubscribeToQueueDistributionChangeEvents(Orleans.Streams.IStreamQueueBalanceListener)">
            <summary>
            Unsubscribe from receiving queue distribution notifications
            </summary>
            <param name="observer">An observer interface to receive queue distribution change notifications.</param>
            <returns>Bool value indicating that unsubscription succeeded or not</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueBalanceListener">
            <summary>
            The stream queue balancer listener receives notifications from a stream queue balancer (<code>IStreamQueueBalancer</code>)
            indicating that the balance of queues has changed.
            It should be implemented by components interested in stream queue load balancing.
            When change notification is received, listener should request updated list of queues from the queue balancer.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamQueueBalanceListener.QueueDistributionChangeNotification">
            <summary>
            Receive notifications about adapter queue responsibility changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Providers.Streams.Common.PersistentStreamProvider`1">
            <summary>
            Persistent stream provider that uses an adapter for persistence
            </summary>
            <typeparam name="TAdapterFactory"></typeparam>
        </member>
        <member name="T:Orleans.Streams.FilterPredicateWrapperData">
            <summary>
            This class is a [Serializable] function pointer to a static predicate method, used for stream filtering.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamFilterPredicateWrapper">
            <summary>
            Filter predicate for streams. 
            Classes implementing this interface MUST be [Serializable]
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamFilterPredicateWrapper.ShouldReceive(Orleans.Streams.IStreamIdentity,System.Object,System.Object)">
            <summary>
            Should this item be delivered to the intended receiver?
            </summary>
            <param name="stream"></param>
            <param name="filterData"></param>
            <param name="item">Item sent through the stream.</param>
            <returns>Return <c>true</c> if this item should be delivered to the intended recipient.</returns>
        </member>
        <member name="T:Orleans.Streams.IStreamControl">
            <summary>
            Stream control interface to allow stream runtime to perform management operations on streams 
            without needing to worry about concrete generic types used by this stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamControl.Cleanup(System.Boolean,System.Boolean)">
            <summary>
            Perform cleanup functions for this stream.
            </summary>
            <returns>Completion promise for the cleanup operstions for this stream.</returns>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Guid">
            <summary> Stream primary key guid. </summary>
        </member>
        <member name="P:Orleans.Streams.IStreamIdentity.Namespace">
            <summary> Stream namespace. </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.ExecutingEntityIdentity">
            <summary>
            Retrieves the opaque identity of currently executing grain or client object. 
            Just for logging purposes.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Register a timer to send regular callbacks to this grain.
            This timer will keep the current grain from being deactivated.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="dueTime"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.BindExtension``2(System.Func{``0})">
            <summary>
            Binds an extension to an addressable object, if not already done.
            </summary>
            <typeparam name="TExtension">The type of the extension (e.g. StreamConsumerExtension).</typeparam>
            <param name="newExtensionFunc">A factory function that constructs a new extension object.</param>
            <returns>A tuple, containing first the extension and second an addressable reference to the extension's interface.</returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.PubSub(Orleans.Streams.StreamPubSubType)">
            <summary>
            A Pub Sub runtime interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.GetConsistentRingProvider(System.Int32,System.Int32)">
            <summary>
            A consistent ring interface.
            </summary>
            <param name="numSubRanges">Total number of sub ranges within this silo range.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IStreamProviderRuntime.InvokeWithinSchedulingContextAsync(System.Func{System.Threading.Tasks.Task},System.Object)">
            <summary>
            Invoke the given async function from within a valid Orleans scheduler context.
            </summary>
            <param name="asyncFunc"></param>
        </member>
        <member name="P:Orleans.Streams.IStreamProviderRuntime.InSilo">
            <summary>
            Return true if this runtime executes inside silo, false otherwise (on the client).
            </summary>
            <param name="pubSubType"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.ISiloSideStreamProviderRuntime">
            <summary>
            Provider-facing interface for manager of streaming providers
            </summary>
        </member>
        <member name="M:Orleans.Streams.ISiloSideStreamProviderRuntime.InitializePullingAgents(System.String,Orleans.Streams.IQueueAdapterFactory,Orleans.Streams.IQueueAdapter,Orleans.Streams.PersistentStreamProviderConfig)">
            <summary>
            Start the pulling agents for a given persistent stream provider.
            </summary>
            <param name="streamProviderName"></param>
            <param name="balancerType"></param>
            <param name="pubSubType"></param>
            <param name="adapterFactory"></param>
            <param name="queueAdapter"></param>
            <param name="getQueueMsgsTimerPeriod"></param>
            <param name="initQueueTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IConsistentRingStreamQueueMapper">
            <summary>
            The stream queue mapper is responsible for mapping ring ranges from the load balancing ring provider to stream queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IStreamQueueMapper">
            <summary>
            The stream queue mapper returns a list of all queues and is also responsible for mapping streams to queues.
            Implementation must be thread safe.
            </summary>
        </member>
        <member name="T:Orleans.Streams.DataNotAvailableException">
            <summary>
            Exception indicates that the requested data is not available.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.AddToCache(System.Collections.Generic.IList{Orleans.Streams.IBatchContainer})">
            <summary>
            Add messages to the cache
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.GetCacheCursor(System.Guid,System.String,Orleans.Streams.StreamSequenceToken)">
            <summary>
            Acquire a stream message cursor.  This can be used to retreave messages from the
              cache starting at the location indicated by the provided token.
            </summary>
            <param name="streamGuid"></param>
            <param name="streamNamespace"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCache.IsUnderPressure">
            <summary>
            Returns true if this cache is under pressure.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueCache.Id">
            <summary>
            The id of the queue for which this cache is caching data.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueCache.Size">
            <summary>
            Current cache size.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueCache.MaxAddCount">
            <summary>
            The limit of the maximum number of items that can be added to the cache in a single AddToCache operation.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterCache.CreateQueueCache(Orleans.Streams.QueueId)">
            <summary>
            Create a cache for a given queue id
            </summary>
            <param name="messages"></param>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapterCache.Size">
            <summary>
            Current total size of this cache.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterReceiver">
            <summary>
            Receives batches of messages from a single partition of a message queue.  
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Initialize(System.TimeSpan)">
            <summary>
            Initialize this receiver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.GetQueueMessagesAsync(System.Int32)">
            <summary>
            Retrieves batches from a message queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapterReceiver.Shutdown(System.TimeSpan)">
            <summary>
            Receiver is no longer used.  Shutdown and clean up.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IQueueCacheCursor">
            <summary>
            Enumerates the messages in a stream
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.GetCurrent(System.Exception@)">
            <summary>
            Get the current value.
            </summary>
            <param name="exception"></param>
            <returns>
            Returns the current batch container.
            If null then the stream has completed or there was a stream error.  
            If there was a stream error, an error exception will be provided in the output.
            </returns>
        </member>
        <member name="M:Orleans.Streams.IQueueCacheCursor.MoveNext">
            <summary>
            Move to next message in the stream.
            If it returns false, there are no more messages.  The enumerator is still
             valid howerver and can be called again when more data has come in on this
             stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.OrFilter">
            <summary>
            This class is a [Serializable] holder for a logical-or composite predicate function.
            </summary>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.InitImplicitStreamSubscribers(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes any implicit stream subscriptions specified for a grain class type. If the grain class specified does not have any associated namespaces, then nothing is done.
            </summary>
            <param name="grainClass">A grain class type.</param>
            <exception cref="T:System.ArgumentException">
            Duplicate specification of namespace "...".
            </exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetImplicitSubscribers(Orleans.Streams.StreamId)">
            <summary>
            Retrieve a map of implicit subscriptionsIds to implicit subscribers, given a stream ID. This method throws an exception if there's no namespace associated with the stream ID. 
            </summary>
            <param name="streamId">A stream ID.</param>
            <returns>A set of references to implicitly subscribed grains. They are expected to support the streaming consumer extension.</returns>
            <exception cref="T:System.ArgumentException">The stream ID doesn't have an associated namespace.</exception>
            <exception cref="T:System.InvalidOperationException">Internal invariant violation.</exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.IsImplicitSubscriber(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Determines whether the specified grain is an implicit subscriber of a given stream.
            </summary>
            <param name="grainId">The grain identifier.</param>
            <param name="streamId">The stream identifier.</param>
            <returns>true if the grain id describes an implicit subscriber of the stream described by the stream id.</returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.TryGetImplicitSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId,System.Guid@)">
            <summary>
            Try to get the implicit subscriptionId.
            If an implicit subscription exists, return a subscription Id that is unique per grain type, grainId, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <param name="subscriptionId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(Orleans.Runtime.GrainId,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainId"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeSubscriptionGuid(System.Int32,Orleans.Streams.StreamId)">
            <summary>
            Create a subscriptionId that is unique per grainId, grainType, namespace combination.
            </summary>
            <param name="grainIdTypeCode"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.AddImplicitSubscriber(System.Type,System.Collections.Generic.ISet{System.String})">
            <summary>
            Add an implicit subscriber to the table.
            </summary>
            <param name="grainClass">Type of the grain class whose instances subscribe to the specified namespaces.</param>
            <param name="namespaces">Namespaces instances of the grain class should subscribe to.</param>
            <exception cref="T:System.ArgumentException">
            No namespaces specified.
            or
            Duplicate specification of namespace "...".
            </exception>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.MakeConsumerReference(System.Guid,System.Int32)">
            <summary>
            Create a reference to a grain that we expect to support the stream consumer extension.
            </summary>
            <param name="primaryKey">The primary key of the grain.</param>
            <param name="implTypeCode">The type code of the grain interface.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.ImplicitStreamSubscriberTable.GetNamespacesFromAttributes(System.Type)">
            <summary>
            Collects the namespaces associated with a grain class type through the use of ImplicitStreamSubscriptionAttribute.
            </summary>
            <param name="grainClass">A grain class type that might have ImplicitStreamSubscriptionAttributes associated with it.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">grainType does not describe a grain class.</exception>
            <exception cref="T:System.InvalidOperationException">duplicate specification of ImplicitConsumerActivationAttribute(...).</exception>
        </member>
        <member name="T:Orleans.Providers.IBootstrapProvider">
            <summary>
            Marker interface to be implemented by any app bootstrap classes that want to be loaded and auto-run during silo startup
            </summary>
        </member>
        <member name="T:Orleans.Providers.IStorageProviderRuntime">
            <summary>
            Provider-facing interface for manager of storage providers
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TimeIntervalThreadCycleCounterBased">
            <summary>
            Stopwatch for CPU time of a thread. 
            You must only use Start, Stop, and Restart from thread being measured!
            CANNOT call this class from a different thread that is not the currently executing thread. 
            Otherwise, QueryThreadCycleTime returns undefined (garbage) results. 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.#ctor">
            <summary>
            Create thread CPU timing object. You may call this from a thread outside the one you wish to measure.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Start">
            <summary>
            Start measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Restart">
            <summary>
            Restart measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Stop">
            <summary>
            Stop measuring time thread is using CPU. Must invoke from thread to be measured!
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TimeIntervalThreadCycleCounterBased.Elapsed">
            <summary>
            Obtain current time of stopwatch since last Stop method. You may call this from any thread.
            </summary>
        </member>
        <member name="T:Orleans.Streams.QueueCacheMissException">
            <summary>
            Exception indicates that the requested message is not in the queue cache.
            </summary>
        </member>
        <member name="T:Orleans.Streams.SubscriptionMarker">
            <summary>
            Mark a subscriptionId as either an implicit subscription Id, or a explicit subscription Id.
            high bit of last byte in guild is the subscription type flag.
            1: implicit subscription
            0: explicit subscription
            </summary>
        </member>
        <member name="T:Orleans.Streams.IBatchContainer">
            <summary>
            Each queue message is allowed to be a heterogeneous  ordered set of events.  IBatchContainer contains these events and allows users to query the batch for a specific type of event.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.GetEvents``1">
            <summary>
            Gets events of a specific type from the batch.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IBatchContainer.ShouldDeliver(Orleans.Streams.IStreamIdentity,System.Object,Orleans.Streams.StreamFilterPredicate)">
            <summary>
            Decide whether this batch should be sent to the specified target.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamGuid">
            <summary>
            Stream identifier for the stream this batch is part of.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.StreamNamespace">
            <summary>
            Stream namespace for the stream this batch is part of.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.SequenceToken">
            <summary>
            Stream Sequence Token for the start of this batch.
            </summary>
        </member>
        <member name="P:Orleans.Streams.IBatchContainer.RequestContext">
            <summary>
            The RequestContext that was set at the time event was generated and enqueued into the persistent provider.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapter">
            <summary>
            Stream queue storage adapter.  This is an abstraction layer that hides the implementation details of the underlying queuing system.
            </summary>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.QueueMessageBatchAsync``1(System.Guid,System.String,System.Collections.Generic.IEnumerable{``0},Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="streamId"></param>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Streams.IQueueAdapter.CreateReceiver(Orleans.Streams.QueueId)">
            <summary>
            Creates a quere receiver for the specificed queueId
            </summary>
            <param name="requesterId">Id of requester, for monitoring/logging purposes</param>
            <param name="queueId"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Name">
            <summary>
            Name of the adapter. Primarily for logging purposes
            </summary>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream adapter - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream adapter, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IQueueAdapter.Direction">
            <summary>
            Direction of this queue adapter: Read, Write or ReadWrite.
            </summary>
            <returns>The direction in which this adapter provides data.</returns>
        </member>
        <member name="M:Orleans.Streams.QueueAdapterExtensions.QueueMessageAsync``1(Orleans.Streams.IQueueAdapter,System.Guid,System.String,``0,Orleans.Streams.StreamSequenceToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a set of events to the queue as a single batch associated with the provided streamId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="adapter"></param>
            <param name="streamId"></param>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Streams.IQueueAdapterFactory">
            <summary>
            Adapter factory.  This should create an adapter from the stream provider configuration
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamConsumerExtension">
            <summary>
            The extesion multiplexes all stream related messages to this grain between different streams and their stream observers.
            
            On the silo, we have one extension object per activation and this extesion multiplexes all streams on this activation 
                (streams of all types and ids: different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamConsumer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamDirectory">
            <summary>
            Stores all streams associated with a specific grain activation.
            </summary>
        </member>
        <member name="T:Orleans.Streams.IAsyncStream`1">
            <summary>
            This interface represents an object that serves as a distributed rendevous between producers and consumers.
            It is similar to a Reactive Framework <code>Subject</code> and implements
            <code>IObserver</code> nor <code>IObservable</code> interfaces.
            </summary>
            <typeparam name="T">The type of object that flows through the stream.</typeparam>
        </member>
        <member name="M:Orleans.Streams.IAsyncStream`1.GetAllSubscriptionHandles">
            <summary>
            Retrieves a list of all active subscriptions created by the caller for this stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.IsRewindable">
            <summary>
            Determines whether this is a rewindable stream - supports subscribing from previous point in time.
            </summary>
            <returns>True if this is a rewindable stream, false otherwise.</returns>
        </member>
        <member name="P:Orleans.Streams.IAsyncStream`1.ProviderName">
            <summary> Stream Provider Name. </summary>
        </member>
        <member name="T:Orleans.Providers.Streams.SimpleMessageStream.SimpleMessageStreamProducerExtension">
            <summary>
            Multiplexes messages to mutiple different producers in the same grain over one grain-extension interface.
            
            On the silo, we have one extension per activation and this extesion multiplexes all streams on this activation 
                (different stream ids and different stream providers).
            On the client, we have one extension per stream (we bind an extesion for every StreamProducer, therefore every stream has its own extension).
            </summary>
        </member>
        <member name="T:Orleans.ISystemTarget">
            <summary>
            This is a markup interface for system targets.
            System target are internal runtime objects that share some behaivior with grains, but also impose certain restrictions. In particular:
            System target are asynchronusly addressable actors.
            Proxy class is being generated for ISystemTarget, just like for IGrain
            System target are scheduled by the runtime scheduler and follow turn based concurrency.
            </summary> 
        </member>
        <member name="T:Orleans.Streams.QueueId">
            <summary>
            Identifier of a durable queue.
            Used by Orlens streaming extensions.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamId">
            <summary>
            Identifier of an Orleans virtual stream.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="T:Orleans.Streams.StreamSequenceToken">
            <summary>
            Handle representing stream sequence number/token.
            Consumer may subsribe to the stream while specifying the start of the subsription sequence token.
            That means that the stream infarstructure will deliver stream events starting from this sequence token.
            </summary>
        </member>
        <member name="M:Orleans.SetExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shortcut to create HashSet from IEnumerable that supports type inference
            (which the standard constructor does not)
            </summary>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1},System.Action{``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Synchronize contents of two dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="sync">Synchronize two values, return synced value</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2},System.Action{``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with mutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two mutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Synchronize2``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}},System.Func{``2,``2,``2})">
            <summary>
            Synchronize contents of two nested dictionaries with immutable values
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TKey2">Nested key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="a">Dictionary</param>
            <param name="b">Dictionary</param>
            <param name="copy">Return a copy of a value</param>
            <param name="sync">Synchronize two immutable values</param>
        </member>
        <member name="M:Orleans.SetExtensions.Copy``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,``1})">
            <summary>
            Copy a dictionary with mutable values
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="original"></param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.SetExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.String)">
            <summary>
            ToString every element of an enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="toString">Can supply null to use Object.ToString()</param>
            <param name="before">Before each element, or space if unspecified</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.#ctor(System.String)">
            <summary>
            Keep track of thread statistics, mainly timing, can be created outside the thread to be tracked.
            </summary>
            <param name="threadName">Name used for logging the collected stastistics</param>
            <param name="storage"></param>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartExecution">
            <summary>
            Call once when the thread is started, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopExecution">
            <summary>
            Call once when the thread is stopped, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStartProcessing">
            <summary>
            Call once before processing a request, must be called from the thread being tracked
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.OnStopProcessing">
            <summary>
            Call once after processing multiple requests as a batch or a single request, must be called from the thread being tracked
            </summary>
            <param name="num">Number of processed requests</param>
        </member>
        <member name="M:Orleans.Runtime.ThreadTrackingStatistic.IncrementNumberOfProcessed(System.Int32)">
            <summary>
            Call once to just increment the stastistic of processed requests
            </summary>
            <param name="num">Number of processed requests</param>
        </member>
        <member name="T:Orleans.Messaging.GatewayClientReceiver">
            <summary>
            The Receiver class is used by the GatewayConnection to receive messages. It runs its own thread, but it performs all i/o operations synchronously.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.GatewayConnection">
            <summary>
            The GatewayConnection class does double duty as both the manager of the connection itself (the socket) and the sender of messages
            to the gateway. It uses a single instance of the Receiver class to handle messages from the gateway.
            
            Note that both sends and receives are synchronous.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceMap">
            <summary>
            Internal data structure that holds a grain interfaces to grain classes map.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainInterfaceData">
            <summary>
            Metadata for a grain interface
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainClassData">
            <summary>
            Metadata for a grain class
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITypeManager">
            <summary>
            Client gateway interface for obtaining the grain interface/type map.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.HistogramValueStatistic">
            <summary>
            Abstract class for histgram value statistics, instantiate either HistogramValueStatistic or LinearHistogramValueStatistic
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ExponentialHistogramValueStatistic">
            <summary>
            Histogram created where buckets grow exponentially
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LinearHistogramValueStatistic">
            <summary>
            Histogram created where buckets are uniform size
            </summary>
        </member>
        <member name="M:Orleans.Runtime.FloatValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.RuntimeStatisticsGroup.TotalPhysicalMemory">
            
             <summary>Amount of physical memory on the machine</summary>
             
        </member>
        <member name="P:Orleans.Runtime.RuntimeStatisticsGroup.AvailableMemory">
            
             <summary>Amount of memory available to processes running on the machine</summary>
             
        </member>
        <member name="T:Orleans.Concurrency.Immutable`1">
            <summary>
            Wrapper class for carrying immutable data.
            </summary>
            <remarks>
            Objects that are known to be immutable are given special fast-path handling by the Orleans serializer 
            -- which in a nutshell allows the DeepCopy step to be skipped during message sends where the sender and reveiving grain are in the same silo.
            
            One very common usage pattern for Immutable is when passing byte[] parameters to a grain. 
            If a program knows it will not alter the contents of the byte[] (for example, if it contains bytes from a static image file read from disk)
            then considerable savings in memory usage and message throughput can be obtained by marking that byte[] argument as <c>Immutable</c>.
            </remarks>
            <typeparam name="T">Type of data to be wrapped by this Immutable</typeparam>
        </member>
        <member name="M:Orleans.Concurrency.Immutable`1.#ctor(`0)">
            <summary>
            Constructor to wrap the specified data object in new Immutable wrapper.
            </summary>
            <param name="value">Value to be wrapped and marked as immutable.</param>
        </member>
        <member name="M:Orleans.Concurrency.Immutable`1.GetCopy">
            <summary>
            Create a deep copy of the original value stored in this Immutable wrapper.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orleans.Concurrency.Immutable`1.Value">
            <summary> Return reference to the original value stored in this Immutable wrapper. </summary>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableExt">
            <summary>
            Utility class to add the .AsImmutable method to all objects.
            </summary>
        </member>
        <member name="M:Orleans.Concurrency.ImmutableExt.AsImmutable``1(``0)">
            <summary>
            Extension method to return this value wrapped in <c>Immutable</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be wrapped.</param>
            <returns>Immutable wrapper around the original object.</returns>
            <seealso cref="T:Orleans.Concurrency.Immutable`1"/>"/&gt;
        </member>
        <member name="T:Orleans.Providers.ProviderLoader`1">
            <summary>
            Providers configuration and loading error semantics:
            1) We will only load the providers that were specified in the config. 
            If a provider is not specified in the config, we will not attempt to load it.
            Specificaly, it means both storage and streaming providers are loaded only if configured.
            2) If a provider is specified in the config, but was not loaded (no type found, or constructor failed, or Init failed), the silo will fail to start.
            
            Loading providers workflow and error handling implementation:
            1) Load ProviderCategoryConfiguration.
                a) If CategoryConfiguration not found - it is not an error, continue.
            2) Go over all assemblies and load all found providers and instantiate them via ProviderTypeManager.
                a) If a certain found provider type failed to get instantiated, it is not an error, continue.
            3) Validate all providers were loaded: go over all provider config and check that we could indeed load and instantiate all of them.
                a) If failed to load or instantiate at least one configured provider, fail the silo start.
            4) InitProviders: call Init on all loaded providers. 
                a) Failure to init a provider wil result in silo failing to start.
            </summary>
            <typeparam name="TProvider"></typeparam>
        </member>
        <member name="M:Orleans.JenkinsHash.Factory.GetHashGenerator(System.Boolean)">
            <summary>
            Get an instance of Jenkins hash generator
            </summary>
            <param name="threadLocal">Whether instance should be ThreadLocal to provide thread safe instance</param>
            <returns>Hash generator instance</returns>
        </member>
        <member name="T:Orleans.Storage.IStorageProvider">
            <summary>
            Interface to be implemented for a storage provider able to read and write Orleans grain state data.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.Close">
            <summary>Close function for this storage provider instance.</summary>
            <returns>Completion promise for the Close operation on this provider.</returns>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.ReadStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Read data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be populated for this grain.</param>
            <returns>Completion promise for the Read operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.WriteStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Write data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">State data object to be written for this grain.</param>
            <returns>Completion promise for the Write operation on the specified grain.</returns>
        </member>
        <member name="M:Orleans.Storage.IStorageProvider.ClearStateAsync(System.String,Orleans.Runtime.GrainReference,Orleans.IGrainState)">
            <summary>Delete / Clear data function for this storage provider instance.</summary>
            <param name="grainType">Type of this grain [fully qualified class name]</param>
            <param name="grainReference">Grain reference object for this grain.</param>
            <param name="grainState">Copy of last-known state data object for this grain.</param>
            <returns>Completion promise for the Delete operation on the specified grain.</returns>
        </member>
        <member name="P:Orleans.Storage.IStorageProvider.Log">
            <summary>TraceLogger used by this storage provider instance.</summary>
            <returns>Reference to the TraceLogger object used by this provider.</returns>
            <seealso cref="T:Orleans.Runtime.Logger"/>
        </member>
        <member name="T:Orleans.Storage.IRestExceptionDecoder">
            <summary>
            Interface to be optionally implemented by storage providers to return richer exception details.
            </summary>
        </member>
        <member name="M:Orleans.Storage.IRestExceptionDecoder.DecodeException(System.Exception,System.Net.HttpStatusCode@,System.String@,System.Boolean)">
            <summary>
            Decode details of the exceprion
            </summary>
            <param name="e">Excption to decode</param>
            <param name="httpStatusCode">HTTP status code for the error</param>
            <param name="restStatus">REST status for the error</param>
            <param name="getExtendedErrors">Whether or not to extract REST error code</param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Storage.BadProviderConfigException">
            <summary>
            Exception thrown whenever a grain call is attempted with a bad / missing storage provider configuration settings for that grain.
            </summary>
        </member>
        <member name="T:Orleans.Storage.InconsistentStateException">
            <summary>
            Exception thrown when a storage provider detects an Etag inconsistency when attemptiong to perform a WriteStateAsync operation.
            </summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.StoredEtag">
            <summary>The Etag value currently held in persistent storage.</summary>
        </member>
        <member name="P:Orleans.Storage.InconsistentStateException.CurrentEtag">
            <summary>The Etag value currently help in memory, and attempting to be updated.</summary>
        </member>
        <member name="T:Orleans.Runtime.ICatalog">
            <summary>
            Remote interface to grain and activation state
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICatalog.DeleteActivations(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress})">
            <summary>
            Delete activations from this silo
            </summary>
            <param name="activationAddresses"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.IMembershipTableGrain">
            <summary>
            Membership table interface for grain based implementation.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithGuidKey">
            <summary>
            Marker interface for grains with <see cref="T:System.Guid"/> keys.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.Version">
            <summary>
            The version part of this TableVersion. Monotonically increasing number.
            </summary>
        </member>
        <member name="P:Orleans.TableVersion.VersionEtag">
            <summary>
            The etag of this TableVersion, used for validation of table update operations.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IManagementGrain">
            <summary>
            Interface for system management functions of silos, 
            exposed as a grain for receiving remote requests / commands.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetHosts(System.Boolean)">
            <summary>
            Get the list of silo hosts and statuses currently known about in this cluster.
            </summary>
            <param name="onlyActive">Whether data on just current active silos should be returned, 
            or by default data for all current and previous silo instances [including those in Joining or Dead status].</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetSystemLogLevel(Orleans.Runtime.SiloAddress[],System.Int32)">
            <summary>
            Set the current log level for system runtime components.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetAppLogLevel(Orleans.Runtime.SiloAddress[],System.Int32)">
            <summary>
            Set the current log level for application grains.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.SetLogLevel(Orleans.Runtime.SiloAddress[],System.String,System.Int32)">
            <summary>
            Set the current log level for a particular TraceLogger, by name (with prefix matching).
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <param name="logName">Name of the TraceLogger (with prefix matching) to change.</param>
            <param name="traceLevel">New log level to use.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceGarbageCollection(Orleans.Runtime.SiloAddress[])">
            <summary>
            Perform a run of the .NET garbage collector in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceActivationCollection(Orleans.Runtime.SiloAddress[],System.TimeSpan)">
            <summary>
            Perform a run of the Orleans activation collecter in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.ForceRuntimeStatisticsCollection(Orleans.Runtime.SiloAddress[])">
            <summary>
            Perform a run of the silo statistics collector in the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetRuntimeStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent silo runtime statistics information for the specified silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics(Orleans.Runtime.SiloAddress[])">
            <summary>
            Return the most recent grain statistics information, amalgomated across silos.
            </summary>
            <param name="hostsIds">List of silos this command is to be sent to.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetSimpleGrainStatistics">
            <summary>
            Return the most recent grain statistics information, amalgomated across all silos.
            </summary>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.GetGrainActivationCount(Orleans.Runtime.GrainReference)">
            <summary>
            Return the most recent activation count for a specific grain across all silos.
            </summary>
            <param name="grainReference">Reference to the grain to be queried.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Runtime.IManagementGrain.UpdateConfiguration(Orleans.Runtime.SiloAddress[],System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update the configuration information dynamically. Only a subset of configuration information
            can be updated - will throw an error (and make no config changes) if you specify attributes
            or elements that cannot be changed. The configuration format is XML, in the same format
            as the OrleansConfiguration.xml file. The allowed elements and attributes are:
            <pre>
            &lt;OrleansConfiguration&gt;
                &lt;Globals&gt;
                    &lt;Messaging ResponseTimeout=&quot;?&quot;/&gt;
                    &lt;Caching CacheSize=&quot;?&quot;/&gt;
                    &lt;Activation CollectionInterval=&quot;?&quot; CollectionAmount=&quot;?&quot; CollectionTotalMemoryLimit=&quot;?&quot; CollectionActivationLimit=&quot;?&quot;/&gt;
                    &lt;Liveness ProbeTimeout=&quot;?&quot; TableRefreshTimeout=&quot;?&quot; NumMissedProbesLimit=&quot;?&quot;/&gt;
                &lt;/Globals&gt;
                &lt;Defaults&gt;
                    &lt;LoadShedding Enabled=&quot;?&quot; LoadLimit=&quot;?&quot;/&gt;
                    &lt;Tracing DefaultTraceLevel=&quot;?&quot; PropagateActivityId=&quot;?&quot;&gt;
                        &lt;TraceLevelOverride LogPrefix=&quot;?&quot; TraceLevel=&quot;?&quot;/&gt;
                    &lt;/Tracing&gt;
                &lt;/Defaults&gt;
            &lt;/OrleansConfiguration&gt;
            </pre>
            </summary>
            <param name="hostIds">Silos to update, or null for all silos</param>
            <param name="configuration">XML elements and attributes to update</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.SiloStatusChangeNotification(Orleans.Runtime.SiloAddress,Orleans.Runtime.SiloStatus)">
            <summary>
            Receive notifications about silo status events. 
            </summary>
            <param name="updatedSilo">Silo to update about</param>
            <param name="status">Status of the silo</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IMembershipService.Ping(System.Int32)">
            <summary>
            Ping request from another silo that probes the liveness of the recipient silo.
            </summary>
            <param name="pingNumber">A unique sequence number for ping message, to facilitate testijng and debugging.</param>
        </member>
        <member name="T:Orleans.IReminderTable">
            <summary>
            Interface for multiple implementations of the underlying storage for reminder data:
            Azure Table, SQL, development emulator grain, and a mock implementation.
            Defined as a grain interface for the development emulator grain case.
            </summary>  
        </member>
        <member name="M:Orleans.IReminderTable.ReadRows(System.UInt32,System.UInt32)">
            <summary>
            Return all rows that have their GrainReference's.GetUniformHashCode() in the range (start, end]
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.IReminderTable.RemoveRow(Orleans.Runtime.GrainReference,System.String,System.String)">
            <summary>
            Remove a row from the table.
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            /// <param name="eTag"></param>
            <returns>true if a row with <paramref name="grainRef"/> and <paramref name="reminderName"/> existed and was removed successfully, false otherwise</returns>
        </member>
        <member name="T:Orleans.IReminderTableGrain">
            <summary>
            Reminder table interface for grain based implementation.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IGrainReminder">
            <summary>
            Handle for a persistent Reminder.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.IGrainReminder.ReminderName">
            <summary> Name of this Reminder. </summary>
        </member>
        <member name="M:Orleans.IReminderService.RegisterOrUpdateReminder(Orleans.Runtime.GrainReference,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a new reminder or updates an existing one
            </summary>
            <param name="grainRef"></param>
            <param name="reminderName"></param>
            <param name="dueTime"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.IRemoteGrainDirectory">
            <summary>
            Per-silo system interface for managing the distributed, partitioned grain-silo-activation directory.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.Register(Orleans.Runtime.ActivationAddress,System.Int32)">
            <summary>
            Record a new grain activation by adding it to the directory.
            </summary>
            <param name="address">The address of the new activation.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns>The version associated with this directory mapping.</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterMany(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},System.Int32)">
            <summary>
            Records a bunch of new grain activations.
            </summary>
            <param name="silo"></param>
            <param name="addresses"></param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterSingleActivation(Orleans.Runtime.ActivationAddress,System.Int32)">
            <summary>
            Registers a new activation, in single activation mode, with the directory service.
            If there is already an activation registered for this grain, then the new activation will
            not be registered and the address of the existing activation will be returned.
            Otherwise, the passed-in address will be returned.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="silo"></param>
            <param name="address">The address of the potential new activation.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns>The address registered for the grain's single activation and the version associated with it.</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RegisterManySingleActivation(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},System.Int32)">
            <summary>
            Registers multiple new activations, in single activation mode, with the directory service.
            If there is already an activation registered for any of the grains, then the corresponding new activation will
            not be registered.
            <para>This method must be called from a scheduler thread.</para>
            </summary>
            <param name="silo"></param>
            <param name="addresses"></param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.Unregister(Orleans.Runtime.ActivationAddress,System.Boolean,System.Int32)">
            <summary>
            Remove an activation from the directory.
            </summary>
            <param name="address">The address of the activation to unregister.</param>
            <param name="force">If true, then the entry is removed; if false, then the entry is removed only if it is
            sufficiently old.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns>Success</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.DeleteGrain(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Removes all directory information about a grain.
            </summary>
            <param name="grain">The ID of the grain to look up.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.LookUp(Orleans.Runtime.GrainId,System.Int32)">
            <summary>
            Fetch the list of the current activations for a grain along with the version number of the list.
            </summary>
            <param name="grain">The ID of the grain.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.LookUpMany(System.Collections.Generic.List{System.Tuple{Orleans.Runtime.GrainId,System.Int32}},System.Int32)">
            <summary>
            Fetch the updated information on the given list of grains.
            This method should be called only remotely to refresh directory caches.
            </summary>
            <param name="grainAndETagList">list of grains and generation (version) numbers. The latter denote the versions of 
            the lists of activations currently held by the invoker of this method.</param>
            <param name="retries">Number of retries to execute the method in case the virtual ring (servers) changes.</param>
            <returns>list of tuples holding a grain, generation number of the list of activations, and the list of activations. 
            If the generation number of the invoker matches the number of the destination, the list is null. If the destination does not
            hold the information on the grain, generation counter -1 is returned (and the list of activations is null)</returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.AcceptHandoffPartition(Orleans.Runtime.SiloAddress,System.Collections.Generic.Dictionary{Orleans.Runtime.GrainId,Orleans.Runtime.IGrainInfo},System.Boolean)">
            <summary>
            Handoffs the the directory partition from source silo to the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <param name="partition">The (full or partial) copy of the directory partition to be Haded off.</param>
            <param name="isFullCopy">Flag specifying whether it is a full copy of the directory partition (and thus any old copy should be just replaced) or the
            a delta copy (and thus the old copy should be updated by delta changes) </param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.RemoveHandoffPartition(Orleans.Runtime.SiloAddress)">
            <summary>
            Removes the handed off directory partition from source silo on the destination silo.
            </summary>
            <param name="source">The address of the owner of the partition.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IRemoteGrainDirectory.UnregisterMany(System.Collections.Generic.List{Orleans.Runtime.ActivationAddress},System.Int32)">
            <summary>
            Unregister a block of addresses at once
            </summary>
            <param name="activationAddresses"></param>
            <param name="retries"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.ISystemTargetBase">
            <summary>
            Internal interface implemented by SystemTarget classes to expose the necessary internal info that allows this.AsReference to for for SystemTarget's same as it does for a grain class.
            </summary>
        </member>
        <member name="T:Orleans.IRemindable">
            <summary>
            Callback interface that grains must implement inorder to be able to register and receive Reminders.
            </summary>
        </member>
        <member name="M:Orleans.IRemindable.ReceiveReminder(System.String,Orleans.Runtime.TickStatus)">
            <summary>
            Receieve a new Reminder.
            </summary>
            <param name="reminderName">Name of this Reminder</param>
            <param name="status">Status of this Reminder tick</param>
            <returns>Completion promise which the grain will resolve when it has finished processing this Reminder tick.</returns>
        </member>
        <member name="T:Orleans.Runtime.TickStatus">
            <summary>
            The status of a tick when the tick is delivered to the registrar grain.
            In case of failures, it may happen that a tick is not delievered on time. The app can notice such missed missed ticks as follows.
            Upon receiving a tick, the app can calculate the theoretical number of ticks since start of the reminder as: 
            curCount = (Now - FirstTickTime) / Period
            The app can keep track of it as 'count'. Upon receiving a tick, the number of missed ticks = curCount - count - 1
            Thereafter, the app can set count = curCount
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.FirstTickTime">
            <summary>
            The time at which the first tick of this reminder is due, or was triggered
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.Period">
            <summary>
            The period of the reminder
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TickStatus.CurrentTickTime">
            <summary>
            The time on the runtime silo when the silo initiated the delivery of this tick.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ReminderException">
            <summary>
            Exception related to Orleans Reminder functions or Reminder service.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.StringValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.BufferPool.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a buffer pool.
            </summary>
            <param name="bufferSize">The size, in bytes, of each buffer.</param>
            <param name="maxBuffers">The maximum number of buffers to keep around, unused; by default, the number of unused buffers is unbounded.</param>
        </member>
        <member name="T:Orleans.Runtime.SiloRuntimeStatistics">
            <summary>
            Snapshot of current runtime statistics for a silo
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ActivationCount">
            <summary>
            Total number of activations in a silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RecentlyUsedActivationCount">
            <summary>
            Number of activations in a silo that have been recently used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.RequestQueueLength">
            <summary>
            The size of the request queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.SendQueueLength">
            <summary>
            The size of the sending queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ReceiveQueueLength">
            <summary>
            The size of the receiving queue.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.CpuUsage">
            <summary>
            The CPU utilization.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.AvailableMemory">
            <summary>
            The amount of memory available in the silo [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.MemoryUsage">
            <summary>
            The used memory size.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.TotalPhysicalMemory">
            <summary>
            The total physical memory available [bytes].
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.IsOverloaded">
            <summary>
            Is this silo overloaded.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.ClientCount">
            <summary>
            The number of clients currently connected to that silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloRuntimeStatistics.DateTime">
            <summary>
            The DateTime when this statistics was created.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainStatistic">
            <summary>
            Snapshot of current statistics for a given grain type.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainStatistic.ToString">
            <summary>
            Returns the string representatio of this GrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainType">
            <summary>
            The type of the grain for this GrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.GrainCount">
            <summary>
            Number of grains of a this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.ActivationCount">
            <summary>
            Number of activation of a agrain of this type.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainStatistic.SiloCount">
            <summary>
            Number of silos that have activations of this grain type.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SimpleGrainStatistic">
            <summary>
            Simple snapshot of current statistics for a given grain type on a given silo.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SimpleGrainStatistic.ToString">
            <summary>
            Returns the string representatio of this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.GrainType">
            <summary>
            The type of the grain for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.SiloAddress">
            <summary>
            The silo address for this SimpleGrainStatistic.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.SimpleGrainStatistic.ActivationCount">
            <summary>
            The number of activations of this grain type on this given silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.LimitManager">
            <summary>
            Limits Manager
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SafeTimerBase">
            <summary>
            SafeTimerBase - an internal base class for implementing sync and async timers in Orleans.
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SafeTimerBase.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="newDueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns><c>true</c> if the timer was successfully updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Orleans.Runtime.SafeTimer">
            <summary>
            SafeTimer - A wrapper class around .NET Timer objects, with some additional built-in safeguards against edge-case errors.
            
            SafeTimer is a replacement for .NET Timer objects, and removes some of the more infrequently used method overloads for simplification.
            SafeTimer provides centralization of various "guard code" previously added in various places for handling edge-case fault conditions.
            
            Log levels used: Recovered faults => Warning, Per-Timer operations => Verbose, Per-tick operations => Verbose3
            </summary>
        </member>
        <member name="T:Orleans.Runtime.StandardExtensions">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReferenceCache`2">
            <summary>
            This class implements an LRU (Least-Recently Used) cache of grain references. It keeps a bounded set of values and will age-out "old" values 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.GrainReferenceCache{`0,`1}.FetchValueDelegate,Orleans.Runtime.GrainReferenceCache{`0,`1}.CastDelegate)">
            <summary>
            Creates a new LRU (Least-Recently Used) cache of GrainReferences.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"> Delegate for fetching the value associated with a given key</param>
            <param name="c"> Delegate for casting IAddressable to TValue</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReferenceCache`2.Get(`0)">
            <summary>
            Get a grain reference for the specified cache-key.
            The grain reference will either be taken from cahce, or a new one will be created by calling the <c>FetchValueDelegate</c>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.GrainReferenceCache`2.Count">
            <summary>
            Return the number of entries currently in the cache
            </summary>
        </member>
        <member name="T:Orleans.Runtime.RequestContext">
            <summary>
            This class holds information regarding the request currently being processed.
            It is explicitly intended to be available to application code.
            </summary>
            <remarks>
            <para>
            The request context is represented as a property bag.
            Some values are provided by default; others are derived from messages headers in the
            request that led to the current processing.
            </para>
            <para>
            Information stored in RequestContext is propagated from 
            Orleans clients to Orleans grains automatically 
            by the Orleans runtime.
            RequestContext data is not automatically propagated across 
            TPL thread-switch boundaries -- <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> 
            for that type of functionality.
            </para>
            </remarks>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Get(System.String)">
            <summary>
            Retrieve a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be retrieved.</param>
            <returns>The value currently in the RequestContext for the specified key, 
            otherwise returns <c>null</c> if no data is present for that key.</returns>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Set(System.String,System.Object)">
            <summary>
            Sets a value into the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be updated / added.</param>
            <param name="value">The value to be stored into RequestContext.</param>
        </member>
        <member name="M:Orleans.Runtime.RequestContext.Remove(System.String)">
            <summary>
            Remove a value from the RequestContext key-value bag.
            </summary>
            <param name="key">The key for the value to be removed.</param>
            <returns>Boolean <c>True</c> if the value was previously in the RequestContext key-value bag and has now been removed, otherwise returns <c>False</c>.</returns>
        </member>
        <member name="P:Orleans.Runtime.RequestContext.PropagateActivityId">
            <summary>
            Whether Trace.CorrelationManager.ActivityId settings should be propagated into grain calls.
            </summary>
        </member>
        <member name="T:Orleans.ErrorCode">
            <summary>
            The set of error types used by the Orleans runtime libraries for logging errors.
            </summary>
        </member>
        <member name="T:Orleans.Messaging.IGatewayListObservable">
            <summary>
            An optional interface that GatewayListProvider may implement if it support out of band gw update notifications.
            By default GatewayListProvider should suppport pull based queries (GetGateways).
            Optionally, some GatewayListProviders may be able to notify a listener if an updated gw information is available.
            This is optional and not required.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CounterStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.IntValueStatistic.GetCurrentValue">
            <summary>
            Returns the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.RuntimeVersion.ProgamIdent">
            <summary>
            Writes the Orleans program ident info to the Console, eg: 'OrleansHost v2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.Current">
            <summary>
            The full version string of the Orleans runtime, eg: '2012.5.9.51607 Build:12345 Timestamp: 20120509-185359'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ApiVersion">
            <summary>
            The ApiVersion of the Orleans runtime, eg: '1.0.0.0'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.FileVersion">
            <summary>
            The FileVersion of the Orleans runtime, eg: '2012.5.9.51607'
            </summary>
        </member>
        <member name="P:Orleans.Runtime.RuntimeVersion.ProgramName">
            <summary>
            The program name string for the Orleans runtime, eg: 'OrleansHost'
            </summary>
        </member>
        <member name="T:Orleans.Runtime.SafeRandom">
            <summary>
            Thread-safe random number generator.
            Has same API as System.Random but is thread safe, similar to the implementation by Steven Toub: http://blogs.msdn.com/b/pfxteam/archive/2014/10/20/9434171.aspx
            </summary>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamReader">
            <summary>
            Reader for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Byte[])">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input byte array.
            </summary>
            <param name="input">Input binary data to be tokenized.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Create a new BinaryTokenStreamReader to read from the specified input buffers.
            </summary>
            <param name="buffs">The list of ArraySegments to use for the data.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadInt">
            <summary> Read an <c>Int32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUInt">
            <summary> Read an <c>UInt32</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadShort">
            <summary> Read an <c>Int16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadUShort">
            <summary> Read an <c>UInt16</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadLong">
            <summary> Read an <c>Int64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadULong">
            <summary> Read an <c>UInt64</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadFloat">
            <summary> Read an <c>float</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDouble">
            <summary> Read an <c>double</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadDecimal">
            <summary> Read an <c>decimal</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadString">
            <summary> Read an <c>string</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBytes(System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary> Read the next bytes from the stream. </summary>
            <param name="destination">Output array to store the returned data in.</param>
            <param name="offset">Offset into the destination array to write to.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadChar">
            <summary> Read an <c>char</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadByte">
            <summary> Read an <c>byte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSByte">
            <summary> Read an <c>sbyte</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPAddress">
            <summary> Read an <c>IPAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadIPEndPoint">
            <summary> Read an <c>IPEndPoint</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSiloAddress">
            <summary> Read an <c>SiloAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadGrainId">
            <summary> Read an <c>GrainId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadActivationId">
            <summary> Read an <c>ActivationId</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadActivationAddress">
            <summary> Read an <c>ActivationAddress</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadBlockInto(System.Array,System.Int32)">
            <summary>
            Read a block of data into the specified output <c>Array</c>.
            </summary>
            <param name="array">Array to output the data to.</param>
            <param name="n">Number of bytes to read.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.PeekToken">
            <summary>
            Peek at the next token in this input stream.
            </summary>
            <returns>Next token thatr will be read from the stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadToken">
            <summary> Read a <c>SerializationTokenType</c> value from the stream. </summary>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadFullTypeHeader(System.Type)">
            <summary> Read a <c>Type</c> value from the stream. </summary>
            <param name="expected">Expected Type, if known.</param>
            <returns>Data from current position in stream, converted to the appropriate output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamReader.ReadSpecifiedTypeHeader">
            <summary> Read a <c>Type</c> value from the stream. </summary>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamReader.CurrentPosition">
            <summary> Current read position in the stream. </summary>
        </member>
        <member name="T:Orleans.Serialization.BinaryTokenStreamWriter">
            <summary>
            Writer for Orleans binary token streams
            </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToBytes">
            <summary> Return the output stream as a set of <c>ArraySegment</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ToByteArray">
            <summary> Return the output stream as a <c>byte[]</c>. </summary>
            <returns>Data from this stream, converted to output type.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.ReleaseBuffers">
            <summary> Release any serialization buffers being used by this stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32)">
            <summary> Write an <c>Int32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16)">
            <summary> Write an <c>Int16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64)">
            <summary> Write an <c>Int64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte)">
            <summary> Write a <c>sbyte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32)">
            <summary> Write a <c>UInt32</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16)">
            <summary> Write a <c>UInt16</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64)">
            <summary> Write a <c>UInt64</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte)">
            <summary> Write a <c>byte</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single)">
            <summary> Write a <c>float</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double)">
            <summary> Write a <c>double</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Decimal)">
            <summary> Write a <c>decimal</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.String)">
            <summary> Write a <c>string</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char)">
            <summary> Write a <c>char</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean)">
            <summary> Write a <c>bool</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteNull">
            <summary> Write a <c>null</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteTypeHeader(System.Type,System.Type)">
            <summary> Write a type header for the specified Type to the stream. </summary>
            <param name="t">Type to write header for.</param>
            <param name="expected">Currently expected Type for this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[])">
            <summary> Write a <c>byte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Write the specified number of bytes to the stream, starting at the specified offset in the input <c>byte[]</c>. </summary>
            <param name="b">The input data to be written.</param>
            <param name="offset">The offset into the inout byte[] to start writing bytes from.</param>
            <param name="count">The number of bytes to be written.</param>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int16[])">
            <summary> Write a <c>Int16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int32[])">
            <summary> Write a <c>Int32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Int64[])">
            <summary> Write a <c>Int64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt16[])">
            <summary> Write a <c>UInt16[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt32[])">
            <summary> Write a <c>UInt32[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.UInt64[])">
            <summary> Write a <c>UInt64[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.SByte[])">
            <summary> Write a <c>sbyte[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Char[])">
            <summary> Write a <c>char[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Boolean[])">
            <summary> Write a <c>bool[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Double[])">
            <summary> Write a <c>double[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Single[])">
            <summary> Write a <c>float[]</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.CorrelationId)">
            <summary> Write a <c>CorrelationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPEndPoint)">
            <summary> Write a <c>IPEndPoint</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Net.IPAddress)">
            <summary> Write a <c>IPAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.ActivationAddress)">
            <summary> Write a <c>ActivationAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.SiloAddress)">
            <summary> Write a <c>SiloAddress</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.ActivationId)">
            <summary> Write a <c>ActivationId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(Orleans.Runtime.GrainId)">
            <summary> Write a <c>GrainId</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.TimeSpan)">
            <summary> Write a <c>TimeSpan</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.DateTime)">
            <summary> Write a <c>DataTime</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.Write(System.Guid)">
            <summary> Write a <c>Guid</c> value to the stream. </summary>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.TryWriteSimpleObject(System.Object)">
            <summary>
            Try to write a simple type (non-array) value to the stream.
            </summary>
            <param name="obj">Input object to be written to the output stream.</param>
            <returns>Returns <c>true</c> if the value was successfully written to the output stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.BinaryTokenStreamWriter.WriteArrayHeader(System.Array,System.Type)">
            <summary>
            Write header for an <c>Array</c> to the output stream.
            </summary>
            <param name="a">Data object for which header should be written.</param>
            <param name="expected">The most recent Expected Type currently active for this stream.</param>
        </member>
        <member name="P:Orleans.Serialization.BinaryTokenStreamWriter.CurrentOffset">
            <summary> Current write position in the stream. </summary>
        </member>
        <member name="T:Orleans.Runtime.SiloStatus">
            <summary>
            Possible statuses of a silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Created">
            <summary>
            This silo was just created, but not started yet.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Joining">
            <summary>
            This silo has just started, but not ready yet. It is attempting to join the cluster.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Active">
            <summary>
            This silo is alive and functional.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.ShuttingDown">
            <summary>
            This silo is shutting itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Stopping">
            <summary>
            This silo is stopping itself down.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SiloStatus.Dead">
            <summary>
            This silo is de-activated/considered to be dead.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloStatusExtensions.IsTerminating(Orleans.Runtime.SiloStatus)">
            <summary>
            Return true if this silo is currently terminating: ShuttingDown, Stopping or Dead.
            </summary>
        </member>
        <member name="T:Orleans.GrainClient">
            <summary>
            Client runtime for connecting to Orleans system
            </summary>
            TODO: Make this class non-static and inject it where it is needed.
        </member>
        <member name="M:Orleans.GrainClient.Initialize">
            <summary>
            Initializes the client runtime from the standard client configuration file.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.String)">
            <summary>
            Initializes the client runtime from the provided client configuration file.
            If an error occurs reading the specified configuration file, the initialization fails.
            </summary>
            <param name="configFilePath">A relative or absolute pathname for the client configuration file.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.IO.FileInfo)">
            <summary>
            Initializes the client runtime from the provided client configuration file.
            If an error occurs reading the specified configuration file, the initialization fails.
            </summary>
            <param name="configFile">The client configuration file.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(Orleans.Runtime.Configuration.ClientConfiguration)">
            <summary>
            Initializes the client runtime from the provided client configuration object. 
            If the configuration object is null, the initialization fails. 
            </summary>
            <param name="config">A ClientConfiguration object.</param>
        </member>
        <member name="M:Orleans.GrainClient.Initialize(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Initializes the client runtime from the standard client configuration file using the provided gateway address.
            Any gateway addresses specified in the config file will be ignored and the provided gateway address wil be used instead. 
            </summary>
            <param name="gatewayAddress">IP address and port of the gateway silo</param>
            <param name="overrideConfig">Whether the specified gateway endpoint should override / replace the values from config file, or be additive</param>
        </member>
        <member name="M:Orleans.GrainClient.DoInternalInitialize(Orleans.Runtime.Configuration.ClientConfiguration,Orleans.OutsideRuntimeClient)">
            <summary>
            Initializes client runtime from client configuration object.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.Uninitialize">
            <summary>
            Uninitializes client runtime.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.InternalUninitialize">
            <summary>
            This is the lock free version of uninitilize so we can share 
            it between the public method and error paths inside initialize.
            This should only be called inside a lock(initLock) block.
            </summary>
        </member>
        <member name="M:Orleans.GrainClient.CheckInitialized">
            <summary>
            Check that the runtime is intialized correctly, and throw InvalidOperationException if not
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="M:Orleans.GrainClient.SetResponseTimeout(System.TimeSpan)">
            <summary>
            Set a timeout for responses on this Orleans client.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="M:Orleans.GrainClient.GetResponseTimeout">
            <summary>
            Get a timeout of responses on this Orleans client.
            </summary>
            <returns>The response timeout.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="P:Orleans.GrainClient.IsInitialized">
            <summary>
            Whether the client runtime has already been initialized
            </summary>
            <returns><c>true</c> if client runtime is already initialized</returns>
        </member>
        <member name="P:Orleans.GrainClient.Logger">
            <summary>
            Provides logging facility for applications.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if Orleans runtime is not correctly initialized before this call.</exception>
        </member>
        <member name="P:Orleans.GrainClient.ClientInvokeCallback">
            <summary>
            Global pre-call interceptor function
            Synchronous callback made just before a message is about to be constructed and sent by a client to a grain.
            This call will be made from the same thread that constructs the message to be sent, so any thread-local settings 
            such as <c>Orleans.RequestContext</c> will be picked up.
            </summary>
            <remarks>This callback method should return promptly and do a minimum of work, to avoid blocking calling thread or impacting throughput.</remarks>
            <param name="request">Details of the method to be invoked, including InterfaceId and MethodId</param>
            <param name="grain">The GrainReference this request is being sent through.</param>
        </member>
        <member name="F:Orleans.OutsideRuntimeClient.responseTimeout">
            <summary>
            Response timeout.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Disconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="M:Orleans.OutsideRuntimeClient.Reconnect">
            <summary>
            For testing only.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainStrategy">
            <summary>
            Strategy that applies to an individual grain
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainStrategy.RandomPlacement">
            <summary>
            Placement strategy that indicates that new activations of this grain type should be placed randomly,
            subject to the overall placement policy.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainStrategy.PreferLocalPlacement">
            <summary>
            Placement strategy that indicates that new activations of this grain type should be placed on a local silo.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainStrategy.ActivationCountBasedPlacement">
            <summary>
            Placement strategy that indicates that new activations of this grain type should be placed
            subject to the current load distribution across the deployment.
            This Placement that takes into account CPU/Memory/ActivationCount.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainStrategy.GraphPartitionPlacement">
            <summary>
            Use a graph partitioning algorithm
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ITimebound">
            <summary>
            This interface is for use with the Orleans timers.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ITimebound.OnTimeout">
            <summary>
            This method is called by the timer when the time out is reached.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.CallbackData.StartTimer(System.TimeSpan)">
            <summary>
            Start this callback timer
            </summary>
            <param name="time">Timeout time</param>
        </member>
        <member name="T:Orleans.Concurrency.ReadOnlyAttribute">
            <summary>
            The ReadOnly attribute is used to mark methods that do not modify the state of a grain.
            <para>
            Marking methods as ReadOnly allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application.
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.ReentrantAttribute">
            <summary>
            The Reentrant attribute is used to mark grain implementation classes that allow request interleaving within a task.
            <para>
            This is an advanced feature and should not be used unless the implications are fully understood.
            That said, allowing request interleaving allows the run-time system to perform a number of optimizations
            that may significantly improve the performance of your application. 
            </para>
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.UnorderedAttribute">
            <summary>
            The Unordered attribute is used to mark grain interface in which the delivery order of
            messages is not significant.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.StatelessWorkerAttribute">
            <summary>
            The StatelessWorker attribute is used to mark grain class in which there is no expectation
            of preservation of grain state between requests and where multiple activations of the same grain are allowed to be created by the runtime. 
            </summary>
        </member>
        <member name="P:Orleans.Concurrency.StatelessWorkerAttribute.MaxLocalWorkers">
            <summary>
            Maximal number of local StatelessWorkers in a single silo.
            </summary>
        </member>
        <member name="T:Orleans.Concurrency.AlwaysInterleaveAttribute">
            <summary>
            The AlwaysInterleaveAttribute attribute is used to mark methods that can interleave with any other method type, including write (non ReadOnly) requests.
            </summary>
            <remarks>
            Note that this attribute is applied to method declaration in the grain interface, 
            and not to the method in the implementation class itself.
            </remarks>
        </member>
        <member name="T:Orleans.Concurrency.ImmutableAttribute">
            <summary>
            The Immutable attribute indicates that instances of the marked class or struct are never modified
            after they are created.
            </summary>
            <remarks>
            Note that this implies that sub-objects are also not modified after the instance is created.
            </remarks>
        </member>
        <member name="T:Orleans.Placement.PlacementAttribute">
            <summary>
            Base for all placement policy marker attributes.
            </summary>
        </member>
        <member name="T:Orleans.Placement.RandomPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>RandomPlacement</c> policy.
            </summary>
            <remarks>
            This is the default placement policy, so this attribute does not need to be used for normal grains.
            </remarks>
        </member>
        <member name="T:Orleans.Placement.PreferLocalPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>PreferLocalPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.Placement.ActivationCountBasedPlacementAttribute">
            <summary>
            Marks a grain class as using the <c>ActivationCountBasedPlacement</c> policy.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.TypeCodeOverrideAttribute">
            <summary>
            The TypeCodeOverrideAttribute attribute allows to specify the grain interface ID or the grain class type code
            to override the default ones to avoid hash collisions
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.TypeCodeOverrideAttribute.TypeCode">
            <summary>
            Use a specific grain interface ID or grain class type code (e.g. to avoid hash collisions)
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.CopierMethodAttribute">
            <summary>
            Used to mark a method as providing a copier function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.SerializerMethodAttribute">
            <summary>
            Used to mark a method as providinga serializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.DeserializerMethodAttribute">
            <summary>
            Used to mark a method as providing a deserializer function for that type.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.RegisterSerializerAttribute">
            <summary>
            Used to make a class for auto-registration as a serialization helper.
            </summary>
        </member>
        <member name="T:Orleans.Providers.StorageProviderAttribute">
            <summary>
            The [Orleans.Providers.StorageProvider] attribute is used to define which storage provider to use for persistence of grain state.
            <para>
            Specifying [Orleans.Providers.StorageProvider] property is recommended for all grains which extend Grain&lt;T&gt;.
            If no [Orleans.Providers.StorageProvider] attribute is  specified, then a "Default" strorage provider will be used.
            If a suitable storage provider cannot be located for this grain, then the grain will fail to load into the Silo.
            </para>
            </summary>
        </member>
        <member name="P:Orleans.Providers.StorageProviderAttribute.ProviderName">
            <summary>
            The name of the storage provider to ne used for persisting state for this grain.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.GrainFactoryBase">
            <summary>
            Abstract base class for all grain proxy factory classes.
            </summary>
            <remarks>
            These methods are used from generated code.
            </remarks>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(System.Type,System.Int64,System.String)">
            <summary>
            Fabricate a grain reference for a grain with the specified Int64 primary key
            </summary>
            <param name="grainInterfaceType">Grain type</param>
            <param name="primaryKey">Primary key for the grain</param>
            <param name="grainClassNamePrefix">Prefix or full name of the grain class to disambiguate multiple implementations.</param>
            <returns><c>GrainReference</c> for connecting to the grain with the specified primary key</returns>
            <exception cref="T:System.ArgumentException">If called for a grain type that is not a valid grain type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(System.Type,System.Guid,System.String)">
            <summary>
            Fabricate a grain reference for a grain with the specified Guid primary key
            </summary>
            <param name="grainInterfaceType">Grain type</param>
            <param name="primaryKey">Primary key for the grain</param>
            <param name="grainClassNamePrefix">Prefix or full name of the grain class to disambiguate multiple implementations.</param>
            <returns><c>GrainReference</c> for connecting to the self-managed grain with the specified primary key</returns>
            <exception cref="T:System.ArgumentException">If called for a grain type that is not a valid grain type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(System.Type,System.String,System.String)">
            <summary>
            Fabricate a grain reference for a grain with the specified Guid primary key
            </summary>
            <param name="grainInterfaceType">Grain type</param>
            <param name="primaryKey">Primary key for the grain</param>
            <param name="grainClassNamePrefix">Prefix or full name of the grain class to disambiguate multiple implementations.</param>
            <returns><c>GrainReference</c> for connecting to the self-managed grain with the specified primary key</returns>
            <exception cref="T:System.ArgumentException">If called for a grain type that is not a valid grain type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(System.Type,System.Guid,System.String,System.String)">
            <summary>
            Fabricate a grain reference for an extended-key grain with the specified Guid primary key
            </summary>
            <param name="grainInterfaceType">Grain type</param>
            <param name="primaryKey">Primary key for the grain</param>
            <param name="keyExt">Extended key for the grain</param>
            <param name="grainClassNamePrefix">Prefix or full name of the grain class to disambiguate multiple implementations.</param>
            <returns><c>GrainReference</c> for connecting to the grain with the specified primary key</returns>
            <exception cref="T:System.ArgumentException">If called for a grain type that is not a valid grain type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(System.Type,System.Int64,System.String,System.String)">
            <summary>
            Fabricate a grain reference for an extended-key grain with the specified Int64 primary key
            </summary>
            <param name="grainInterfaceType">Grain type</param>
            <param name="primaryKey">Primary key for the grain</param>
            <param name="keyExt">Extended key for the grain</param>
            <param name="grainClassNamePrefix">Prefix or full name of the grain class to disambiguate multiple implementations.</param>
            <returns><c>GrainReference</c> for connecting to the grain with the specified primary key</returns>
            <exception cref="T:System.ArgumentException">If called for a grain type that is not a valid grain type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(Orleans.IGrainObserver)">
            <summary>
            Check that a grain observer parameter is of the correct underlying concrent type -- either extending from <c>GrainRefereence</c> or <c>Grain</c>
            </summary>
            <param name="grainObserver">Grain observer parameter to be checked.</param>
            <exception cref="T:System.ArgumentNullException">If grainObserver is <c>null</c></exception>
            <exception cref="T:System.NotSupportedException">If grainObserver class is not an appropriate underlying concrete type.</exception>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainFactoryBase.CheckRuntimeEnvironmentSetup">
            <summary>
            Check the current runtime environment has been setup and initialized correctly.
            Throws InvalidOperationException if current runtime environment is not initialized.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IClientObserverRegistrar">
            <summary>
            Client gateway interface for forwarding client requests to silos.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IClientObserverRegistrar.Start">
            <summary>
            Start this system target.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.LogWriterBase">
            <summary>
            The Log Writer base class provides default partial implementation suitable for most specific log writer.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ILogConsumer">
            <summary>
            An interface used to consume log entries. 
            Instaces of a class implementing this should be added to <see cref="P:Orleans.Runtime.TraceLogger.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ILogConsumer.Log(Orleans.Runtime.Logger.Severity,Orleans.Runtime.TraceLogger.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging.
            This method should be very fast, since it is called synchronously during Orleans logging.
            </summary>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="eventCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'. 
            In general, all log entries at severity=Error or greater should specify an explicit error code value.</param>
        </member>
        <member name="M:Orleans.Runtime.LogWriterBase.Log(Orleans.Runtime.Logger.Severity,Orleans.Runtime.TraceLogger.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging.
            This method should be very fast, since it is called synchronously during Orleans logging.
            </summary>
            <remarks>
            To customize functionality in a log writter derived from this base class, 
            you should override the <c>FormatLogMessage</c> and/or <c>WriteLogMessage</c> 
            methods rather than overriding this method directly.
            </remarks>
            <seealso cref="M:Orleans.Runtime.LogWriterBase.FormatLogMessage(System.DateTime,Orleans.Runtime.Logger.Severity,Orleans.Runtime.TraceLogger.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)"/>
            <seealso cref="M:Orleans.Runtime.LogWriterBase.WriteLogMessage(System.String,Orleans.Runtime.Logger.Severity)"/>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="eventCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'.</param>
        </member>
        <member name="M:Orleans.Runtime.LogWriterBase.FormatLogMessage(System.DateTime,Orleans.Runtime.Logger.Severity,Orleans.Runtime.TraceLogger.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>
            The method to call during logging to format the log info into a string ready for output.
            </summary>
            <param name="severity">The severity of the message being traced.</param>
            <param name="loggerType">The type of logger the message is being traced through.</param>
            <param name="caller">The name of the logger tracing the message.</param>
            <param name="myIPEndPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Orleans client/server if known. May be null.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log. May be null.</param>
            <param name="eventCode">Numeric event code for this log entry. May be zero, meaning 'Unspecified'.</param>
        </member>
        <member name="M:Orleans.Runtime.LogWriterBase.WriteLogMessage(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>
            The method to call during logging to write the log message by this log.
            </summary>
            <param name="msg">Message string to be writter</param>
            <param name="severity">The severity level of this message</param>
        </member>
        <member name="T:Orleans.Runtime.LogWriterToTrace">
            <summary>
            The Log Writer class is a convenient wrapper around the .Net Trace class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.IFlushableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Flush function is also supported. 
            Instances of a class implementing this should be added to <see cref="P:Orleans.Runtime.TraceLogger.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.IFlushableLogConsumer.Flush">
            <summary>Flush any pending log writes.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToTrace.WriteLogMessage(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>Write the log message for this log.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToTrace.Flush">
            <summary>Flush any pending output for this log.</summary>
        </member>
        <member name="T:Orleans.Runtime.LogWriterToConsole">
            <summary>
            The Log Writer class is a wrapper around the .Net Console class.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToConsole.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToConsole.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor which allow some limited overides to the format of log message output,
            primarily intended for allow simpler Console screen output.
            </summary>
            <param name="useCompactConsoleOutput"></param>
            <param name="showMessageOnly"></param>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToConsole.FormatLogMessage(System.DateTime,Orleans.Runtime.Logger.Severity,Orleans.Runtime.TraceLogger.LoggerType,System.String,System.String,System.Net.IPEndPoint,System.Exception,System.Int32)">
            <summary>Format the log message into the format used by this log.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToConsole.WriteLogMessage(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>Write the log message for this log.</summary>
        </member>
        <member name="T:Orleans.Runtime.LogWriterToFile">
            <summary>
            This Log Writer class is an Orleans Log Consumer wrapper class which writes to a specified log file.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.ICloseableLogConsumer">
            <summary>
            An interface used to consume log entries, when a Close function is also supported. 
            Instances of a class implementing this should be added to <see cref="P:Orleans.Runtime.TraceLogger.LogConsumers"/> collection in order to retrieve events.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ICloseableLogConsumer.Close">
            <summary>Close this log.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToFile.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor, specifying the file to send output to.
            </summary>
            <param name="logFile">The log file to be written to.</param>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToFile.Close">
            <summary>Close this log file, after flushing any pending output.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToFile.WriteLogMessage(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>Write the log message for this log.</summary>
        </member>
        <member name="M:Orleans.Runtime.LogWriterToFile.Flush">
            <summary>Flush any pending output for this log.</summary>
        </member>
        <member name="T:Orleans.Runtime.SimpleLogWriterToFile">
            <summary>
            Just a simple log writer wrapper class with public WriteToLog method directly, without formatting.
            Mainly to be used from tests and external utilities.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SimpleLogWriterToFile.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor, specifying the file to send output to.
            </summary>
            <param name="logFile">The log file to be written to.</param>
        </member>
        <member name="M:Orleans.Runtime.SimpleLogWriterToFile.WriteToLog(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>
            Output message directly to log file -- no formatting is performed.
            </summary>
            <param name="msg">Message text to be logged.</param>
            <param name="severity">Severity of this log message -- ignored.</param>
        </member>
        <member name="T:Orleans.CodeGeneration.GeneratedAttribute">
            <summary>
            For internal (run-time) use only.
            Base class of all the activation attributes 
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GeneratedAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="forGrainType">type argument</param>
        </member>
        <member name="M:Orleans.CodeGeneration.GeneratedAttribute.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.GeneratedAttribute.ForGrainType">
            <summary>
            Type for which this activation is implemented
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainStateAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="forGrainType">type argument</param>
        </member>
        <member name="M:Orleans.CodeGeneration.MethodInvokerAttribute.#ctor(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="forGrainType">type argument</param>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainReferenceAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="forGrainType">type argument</param>
        </member>
        <member name="T:Orleans.IGrainObserver">
            <summary>
            The IGrainObserver interface is a marker interface for observers.
            Observers are used to receive notifications from grains; that is, they represent the subscriber side of a 
            publisher/subscriber interface.
            Note that all observer methods should be void, since they do not return a value to the observed grain.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithStringKey">
            <summary>
            Marker interface for grains with <see cref="T:System.String"/> keys.
            </summary>
        </member>
        <member name="T:Orleans.IGrainWithIntegerCompoundKey">
            <summary>
            Marker interface for grains with compound keys.
            </summary>
        </member>
        <member name="M:Orleans.Messaging.ProxiedMessageCenter.Disconnect">
            <summary>
            For testing use only
            </summary>
        </member>
        <member name="M:Orleans.Messaging.ProxiedMessageCenter.Reconnect">
            <summary>
            For testing use only.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SocketManager.GetAcceptingSocketForEndpoint(System.Net.IPEndPoint)">
            <summary>
            Creates a socket bound to an address for use accepting connections.
            This is for use by client gateways and other acceptors.
            </summary>
            <param name="address">The address to bind to.</param>
            <returns>The new socket, appropriately bound.</returns>
        </member>
        <member name="T:Orleans.ObserverSubscriptionManager`1">
            <summary>
            The ObserverSubscriptionManager class is a helper class for grains that support observers.
            It provides methods for tracking subscribing observers and for sending notifications.
            </summary>
            <typeparam name="T">The observer interface type to be managed.</typeparam>
        </member>
        <member name="F:Orleans.ObserverSubscriptionManager`1.observers">
            <summary>
            The set of currently-subscribed observers.
            This is implemented as a HashSet of IGrainObserver so that if the same observer subscribes multiple times,
            it will still only get invoked once per notification.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.#ctor">
            <summary>
            Constructs an empty subscription manager.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Subscribe(`0)">
            <summary>
            Records a new subscribing observer.
            </summary>
            <param name="observer">The new subscriber.</param>
            <returns>A promise that resolves when the subscriber is added.
            <para>This promise will be broken if the observer is already a subscriber.
            In this case, the existing subscription is unaffected.</para></returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.IsSubscribed(`0)">
            <summary>
            Determines if the SubscriptionManager has the input observer
            </summary>
            <param name="observer">True if the the observer is already subscribed, otherwise False.</param>
            <returns>True is the SubscriptionManager has the input observer.</returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Unsubscribe(`0)">
            <summary>
            Removes a (former) subscriber.
            </summary>
            <param name="observer">The unsubscribing observer.</param>
            <returns>A promise that resolves when the subscriber is removed.
            This promise will be broken if the observer is not a subscriber.</returns>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Clear">
            <summary>
            Removes all subscriptions.
            </summary>
        </member>
        <member name="M:Orleans.ObserverSubscriptionManager`1.Notify(System.Action{`0})">
            <summary>
            Sends a notification to all subscribers.
            </summary>
            <param name="notification">An action that sends the notification by invoking the proper method on the provided subscriber.
            This action is called once for each current subscriber.</param>
        </member>
        <member name="P:Orleans.ObserverSubscriptionManager`1.Count">
            <summary>
            Number of subscribers currently registered
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceData.IsReadOnly(System.Reflection.MethodInfo)">
            <summary>
            Whether method is read-only, i.e. does not modify grain state, 
            a method marked with [ReadOnly].
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceData.IsPureObserverInterface(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.GrainInterfaceData.GetMethodsImpl(System.Type,System.Type,System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            Recurses through interface graph accumulating methods
            </summary>
            <param name="grainType">Grain type</param>
            <param name="serviceType">Service interface type</param>
            <param name="methodInfos">Accumulated </param>
        </member>
        <member name="M:Orleans.Runtime.ActivationId.#ctor">
            <summary>
            Only used in Json serialization
            DO NOT USE TO CREATE A RANDOM ACTIVATION ID
            Use ActivationId.NewId to create new activation IDs.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.#ctor(Orleans.Runtime.BufferPool)">
            <summary>
            
            </summary>
            <param Name="size"></param>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Byte[])">
            <summary>
            Append a byte array to the byte array.
            Note that this assumes that the array passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param Name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(Orleans.Runtime.ByteArrayBuilder)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Collections.Generic.List{System.ArraySegment{System.Byte}})">
            <summary>
            Append a list of byte array segments to the byte array.
            Note that this assumes that the data passed in is now owned by the ByteArrayBuilder, and will not be modified.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Int64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.SByte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Char[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Boolean[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Single[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.ByteArrayBuilder.Append(System.Double[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClientConfiguration">
            <summary>
            Orleans client configuration parameters.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ITraceConfiguration">
            <summary>
            The TracingConfiguration type contains various tracing-related configuration parameters.
            For production use, the default value of these parameters should be fine.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.DefaultTraceLevel">
            <summary>
            The DefaultTraceLevel attribute specifies the default tracing level for all Orleans loggers, unless overridden by
            a specific TraceLevelOverride element.
            The default level is Info if this attribute does not appear.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceFileName">
            <summary>
            The TraceFileName attribute specifies the name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceFilePattern">
            <summary>
            The TraceFilePattern attribute specifies the pattern name of a file that trace output should be written to.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceLevelOverrides">
            <summary>
            The TraceLevelOverride element provides a mechanism to allow the tracing level to be set differently for different
            parts of the Orleans system.
            The tracing level for a logger is set based on a prefix match on the logger's name.
            TraceLevelOverrides are applied in length order; that is, the override with the longest matching
            LogPrefix takes precedence and specifies the tracing level for all matching loggers.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.TraceToConsole">
            <summary>
            The TraceToConsole attribute specifies whether trace output should be written to the console.
            The default is not to write trace data to the console.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.WriteMessagingTraces">
            <summary>
            The WriteMessagingTraces attribute specifies whether to write details message traces.
            This should be used only in development mode and never in production.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.LargeMessageWarningThreshold">
            <summary>
            The LargeMessageWarningThreshold attribute specifies when to generate a warning trace message for large messages.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.PropagateActivityId">
            <summary>
            The PropagateActivityId attribute specifies whether the value of Tracing.CorrelationManager.ActivityId should be propagated into grain calls, to support E2E tracing.
            The default is not to propagate ActivityId.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ITraceConfiguration.BulkMessageLimit">
            <summary>
            The BulkMessageLimit attribute specifies how to bulk (aggregate) trace messages with identical erro code.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClientConfiguration.ClientName">
            <summary>
            The name of this client.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.LoadFromFile(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.RegisterStreamProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is stream provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Streams.IStreamProvider"/> stream</typeparam>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to stream provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.RegisterStreamProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given stream provider.
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to the stream provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.TryGetProviderConfiguration(System.String,System.String,Orleans.Providers.IProviderConfiguration@)">
            <summary>
            Retrieves an existing provider configuration
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="config">The provider configuration, if exists</param>
            <returns>True if a configuration for this provider already exists, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.GetAllProviderConfigurations">
            <summary>
            Retrieves an enumeration of all currently configured provider configurations.
            </summary>
            <returns>An enumeration of all currently configured provider configurations.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClientConfiguration.StandardLoad">
            <summary>
            Loads the configuration from the standard paths, looking up the directory hierarchy
            </summary>
            <returns>Client configuration data if a configuration file was found.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if no configuration file could be found in any of the standard locations</exception>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.Gateways">
            <summary>
            The list fo the gateways to use.
            Each GatewayNode element specifies an outside grain client gateway node.
            If outside (non-Orleans) clients are to connect to the Orleans system, then at least one gateway node must be specified.
            Additional gateway nodes may be specified if desired, and will add some failure resilience and scalability.
            If multiple gateways are specified, then each client will select one from the list at random.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.PreferedGatewayIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProvider">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DeploymentId">
            <summary>
            Specifies a unique identifier of this deployment.
            If the silos are deployed on Azure (run as workers roles), deployment id is set automatically by Azure runtime, 
            accessible to the role via RoleEnvironment.DeploymentId static variable and is passed to the silo automatically by the role via config. 
            So if the silos are run as Azure roles this variable should not be specified in the OrleansConfiguration.xml (it will be overwritten if specified).
            If the silos are deployed on the cluster and not as Azure roles, this variable should be set by a deployment script in the OrleansConfiguration.xml file.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DataConnectionString">
            <summary>
            Specifies the connection string for the gateway provider.
            If the silos are deployed on Azure (run as workers roles), DataConnectionString may be specified via RoleEnvironment.GetConfigurationSettingValue("DataConnectionString");
            In such a case it is taken from there and passed to the silo automatically by the role via config.
            So if the silos are run as Azure roles and this config is specified via RoleEnvironment, 
            this variable should not be specified in the OrleansConfiguration.xml (it will be overwritten if specified).
            If the silos are deployed on the cluster and not as Azure roles,  this variable should be set in the OrleansConfiguration.xml file.
            If not set at all, DevelopmentStorageAccount will be used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.AdoInvariant">
            <summary>
            When using ADO, identifies the underlying data provider for the gateway provider. This three-part naming syntax is also used when creating a new factory 
            and for identifying the provider in an application configuration file so that the provider name, along with its associated 
            connection string, can be retrieved at run time. https://msdn.microsoft.com/en-us/library/dd0w4a2z%28v=vs.110%29.aspx
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.PreferredFamily">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.NetInterface">
            <summary>
            The Interface attribute specifies the name of the network interface to use to work out an IP address for this machine.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.Port">
            <summary>
            The Port attribute specifies the specific listen port for this client machine.
            If value is zero, then a random machine-assigned port number will be used.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.DNSHostName">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.GatewayListRefreshPeriod">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.UseAzureSystemStore">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.UseSqlSystemStore">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClientConfiguration.ProviderConfigurations">
            <summary>
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClientConfiguration.GatewayProviderType">
            <summary>
            Specifies the type of the gateway provider.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ConfigUtilities">
            <summary>
            Utilities class for handling configuration.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RedactConnectionStringInfo(System.String)">
            <summary>
            Prints the the DataConnectionString, 
            without disclosing any credential info 
            such as the Azure Storage AccountKey or SqlServer password.
            </summary>
            <param name="dataConnectionString">The connection string to print.</param>
            <returns>The string representation of the DataConnectionString with account credential info redacted.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ConfigUtilities.RuntimeVersionInfo">
            <summary>
            Returns the Runtime Version information.
            </summary>
            <returns>the Runtime Version information</returns>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration">
            <summary>
            Data object holding Silo global configuration parameters.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.livenessServiceType">
            <summary>
            The LivenessType attribute controls the liveness method used for silo reliability.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.reminderServiceType">
            <summary>
            The ReminderServiceType attribute controls the type of the reminder service implementation used by silos.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterBootstrapProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is bootstrap provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Providers.IBootstrapProvider"/> interface</typeparam>
            <param name="providerName">Name of the bootstrap provider</param>
            <param name="properties">Properties that will be passed to bootstrap provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterBootstrapProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given bootstrap provider.
            </summary>
            <param name="providerTypeFullName">Full name of the bootstrap provider type</param>
            <param name="providerName">Name of the bootstrap provider</param>
            <param name="properties">Properties that will be passed to the bootstrap provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStreamProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is stream provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Streams.IStreamProvider"/> stream</typeparam>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to stream provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStreamProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given stream provider.
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="properties">Properties that will be passed to the stream provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStorageProvider``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given type of <typeparamref name="T"/> where <typeparamref name="T"/> is storage provider
            </summary>
            <typeparam name="T">Non-abstract type which implements <see cref="T:Orleans.Storage.IStorageProvider"/> storage</typeparam>
            <param name="providerName">Name of the storage provider</param>
            <param name="properties">Properties that will be passed to storage provider upon initialization</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.RegisterStorageProvider(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Registers a given storage provider.
            </summary>
            <param name="providerTypeFullName">Full name of the storage provider type</param>
            <param name="providerName">Name of the storage provider</param>
            <param name="properties">Properties that will be passed to the storage provider upon initialization </param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.TryGetProviderConfiguration(System.String,System.String,Orleans.Providers.IProviderConfiguration@)">
            <summary>
            Retrieves an existing provider configuration
            </summary>
            <param name="providerTypeFullName">Full name of the stream provider type</param>
            <param name="providerName">Name of the stream provider</param>
            <param name="config">The provider configuration, if exists</param>
            <returns>True if a configuration for this provider already exists, false otherwise.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.GlobalConfiguration.GetAllProviderConfigurations">
            <summary>
            Retrieves an enumeration of all currently configured provider configurations.
            </summary>
            <returns>An enumeration of all currently configured provider configurations.</returns>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.SeedNodes">
            <summary>
            SeedNodes are only used in local development setting with LivenessProviderType.MembershipTableGrain
            SeedNodes are never used in production.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.Subnet">
            <summary>
            The subnet on which the silos run. 
            This option should only be used when running on multi-homed cluster. It should not be used when running in Azure.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.PrimaryNodeIsRequired">
            <summary>
            Determines if primary node is required to be configured as a seed node.
            True if LivenessType is set to MembershipTableGrain, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessEnabled">
            <summary>
            Global switch to disable silo liveness protocol (should be used only for testing).
            The LivenessEnabled attribute, if provided and set to "false", suppresses liveness enforcement.
            If a silo is suspected to be dead, but this attribute is set to "false", the suspicions will not propagated to the system and enforced,
            This parameter is intended for use only for testing and troubleshooting.
            In production, liveness should always be enabled.
            Default is true (eanabled)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ProbeTimeout">
            <summary>
            The number of seconds to periodically probe other silos for their liveness or for the silo to send "I am alive" heartbeat  messages about itself.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.TableRefreshTimeout">
            <summary>
            The number of seconds to periodically fetch updates from the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DeathVoteExpirationTimeout">
            <summary>
            Expiration time in seconds for death vote in the membership table.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.IAmAliveTablePublishTimeout">
            <summary>
            The number of seconds to periodically write in the membership table that this silo is alive. Used ony for diagnostics.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxJoinAttemptTime">
            <summary>
            The number of seconds to attempt to join a cluster of silos before giving up.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ExpectedClusterSize">
            <summary>
            The expected size of a cluster. Need not be very accurate, can be an overestimate.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumMissedProbesLimit">
            <summary>
            The number of missed "I am alive" heartbeat messages from a silo or number of un-replied probes that lead to suspecting this silo as dead.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumProbedSilos">
            <summary>
            The number of silos each silo probes for liveness.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumVotesForDeathDeclaration">
            <summary>
            The number of non-expired votes that are needed to declare some silo as dead (should be at most NumMissedProbesLimit)
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.NumMissedTableIAmAliveLimit">
            <summary>
            The number of missed "I am alive" updates  in the table from a silo that causes warning to be logged. Does not impact the liveness protocol.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseLivenessGossip">
            <summary>
            Whether to use the gossip optimization to speed up spreading liveness information.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ServiceId">
            <summary>
            Service Id.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DeploymentId">
            <summary>
            Deployment Id.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionString" -->
        <!-- Badly formed XML comment ignored for member "P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariant" -->
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionStringForReminders">
            <summary>
            Set this property to override <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.DataConnectionString"/> for reminders.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariantForReminders">
            <summary>
            Set this property to override <see cref="P:Orleans.Runtime.Configuration.GlobalConfiguration.AdoInvariant"/> for reminders.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.CacheSize">
            <summary>
            The CacheSize attribute specifies the maximum number of grains to cache directory information for.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.InitialCacheTTL">
            <summary>
            The InitialTTL attribute specifies the initial (minimum) time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaximumCacheTTL">
            <summary>
            The MaximumTTL attribute specifies the maximum time, in seconds, to keep a cache entry before revalidating.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.CacheTTLExtensionFactor">
            <summary>
            The TTLExtensionFactor attribute specifies the factor by which cache entry TTLs should be extended when they are found to be stable.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MaxStorageBusyRetries">
            <summary>
            Retry count for Azure Table operations. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategy">
            <summary>
            The DirectoryCachingStrategy attribute specifies the caching strategy to use.
            The options are None, which means don't cache directory entries locally;
            LRU, which indicates that a standard fixed-size least recently used strategy should be used; and
            Adaptive, which indicates that an adaptive strategy with a fixed maximum size should be used.
            The Adaptive strategy is used by default.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.MembershipTableAssembly">
            <summary>
            Assembly to use for custom MembershipTable implementation
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderTableAssembly">
            <summary>
            Assembly to use for custom ReminderTable implementation
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.ProviderConfigurations">
            <summary>
            Configuration for various runtime providers.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryLazyDeregistrationDelay">
            <summary>
            The time span between when we have added an entry for an activation to the grain directory and when we are allowed
            to conditionally remove that entry. 
            Conditional deregistration is used for lazy clean-up of activations whose prompt deregistration failed for some reason (e.g., message failure).
            This should always be at least one minute, since we compare the times on the directory partition, so message delays and clcks skues have
            to be allowed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseSqlSystemStore">
            <summary>
            Determines if ADO should be used for storage of Membership and Reminders info.
            True if either or both of LivenessType and ReminderServiceType are set to SqlServer, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseZooKeeperSystemStore">
            <summary>
            Determines if ZooKeeper should be used for storage of Membership and Reminders info.
            True if LivenessType is set to ZooKeeper, false otherwise.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.GlobalConfiguration.UseAzureSystemStore">
            <summary>
            Determines if Azure Storage should be used for storage of Membership and Reminders info.
            True if either or both of LivenessType and ReminderServiceType are set to AzureTable, false otherwise.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType">
            <summary>
            Liveness configuration that controls the type of the liveness protocol that silo use for membership.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.MembershipTableGrain">
            <summary>Grain is used to store membership information. 
            This option is not reliable and thus should only be used in local development setting.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.AzureTable">
            <summary>AzureTable is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.SqlServer">
            <summary>SQL Server is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.ZooKeeper">
            <summary>Apache ZooKeeper is used to store membership information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.LivenessProviderType.Custom">
            <summary>Use custom provider from third-party assembly</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType">
            <summary>
            Reminders configuration that controls the type of the protocol that silo use to implement Reminders.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.NotSpecified">
            <summary>Default value to allow discrimination of override values.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.ReminderTableGrain">
            <summary>Grain is used to store reminders information. 
            This option is not reliable and thus should only be used in local development setting.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.AzureTable">
            <summary>AzureTable is used to store reminders information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.SqlServer">
            <summary>SQL Server is used to store reminders information. 
            This option can be used in production.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.MockTable">
            <summary>Used for benchmarking; it simply delays for a specified delay during each operation.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.Disabled">
            <summary>Reminder Service is disabled.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.ReminderServiceProviderType.Custom">
            <summary>Use custom Reminder Service from third-party assembly</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType">
            <summary>
            Configuration type that controls the type of the grain directory caching algorithm that silo use.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.None">
            <summary>Don't cache.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.LRU">
            <summary>Standard fixed-size LRU.</summary>
        </member>
        <member name="F:Orleans.Runtime.Configuration.GlobalConfiguration.DirectoryCachingStrategyType.Adaptive">
            <summary>Adaptive caching with fixed maximum size and refresh. This option should be used in production.</summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.NodeConfiguration">
            <summary>
            Individual node-specific silo configuration parameters.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.SiloName">
            <summary>
            The name of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DNSHostName">
            <summary>
            The DNS host name of this silo.
            This is a true host name, no IP address. It is NOT settable, equals Dns.GetHostName().
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.HostNameOrIPAddress">
            <summary>
            The host name or IP address of this silo.
            This is a configurable IP address or Hostname.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Port">
            <summary>
            The port this silo uses for silo-to-silo communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Generation">
            <summary>
            The epoch generation number for this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Endpoint">
            <summary>
            The IPEndPoint this silo uses for silo-to-silo communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.AddressType">
            <summary>
            The AddressFamilyof the IP address of this silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.ProxyGatewayEndpoint">
            <summary>
            The IPEndPoint this silo uses for (gateway) silo-to-client communication.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsPrimaryNode">
            <summary>
            Whether this is a primary silo (applies for dev settings only).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsSeedNode">
            <summary>
            Whether this is one of the seed silos (applies for dev settings only).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.IsGatewayNode">
            <summary>
            Whether this is silo is a proxying gateway silo.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.MaxActiveThreads">
            <summary>
            The MaxActiveThreads attribute specifies the maximum number of simultaneous active threads the scheduler will allow.
            Generally this number should be roughly equal to the number of cores on the node.
            Using a value of 0 will look at System.Environment.ProcessorCount to decide the number instead.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DelayWarningThreshold">
            <summary>
            The DelayWarningThreshold attribute specifies the work item queuing delay threshold, at which a warning log message is written.
            That is, if the delay between enqueuing the work item and executing the work item is greater than DelayWarningThreshold, a warning log is written.
            The default value is 10 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.ActivationSchedulingQuantum">
            <summary>
            ActivationSchedulingQuantum is a soft time limit on the duration of activation macro-turn (a number of micro-turns). 
            If a activation was running its micro-turns longer than this, we will give up the thread.
            If this is set to zero or a negative number, then the full work queue is drained (MaxWorkItemsPerTurn allowing).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TurnWarningLengthThreshold">
            <summary>
            TurnWarningLengthThreshold is a soft time limit to generate trace warning when the micro-turn executes longer then this period in CPU. 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LoadSheddingEnabled">
            <summary>
            The LoadShedding element specifies the gateway load shedding configuration for the node.
            If it does not appear, gateway load shedding is disabled.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LoadSheddingLimit">
            <summary>
            The LoadLimit attribute specifies the system load, in CPU%, at which load begins to be shed.
            Note that this value is in %, so valid values range from 1 to 100, and a reasonable value is
            typically between 80 and 95.
            This value is ignored if load shedding is disabled, which is the default.
            If load shedding is enabled and this attribute does not appear, then the default limit is 95%.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LimitManager">
            <summary>
            The values for various silo limits.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DefaultTraceLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceLevelOverrides">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.WriteMessagingTraces">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceToConsole">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceFilePattern">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.TraceFileName">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.LargeMessageWarningThreshold">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.PropagateActivityId">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.BulkMessageLimit">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsMetricsTableWriteInterval">
            <summary>
            The MetricsTableWriteInterval attribute specifies the frequency of updating the metrics in Azure table.
             The default is 30 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsPerfCountersWriteInterval">
            <summary>
            The PerfCounterWriteInterval attribute specifies the frequency of updating the windows performance counters.
            The default is 30 seconds.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsLogWriteInterval">
            <summary>
            The LogWriteInterval attribute specifies the frequency of updating the statistics in the log file.
            The default is 5 minutes.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsWriteLogStatisticsToTable">
            <summary>
            The WriteLogStatisticsToTable attribute specifies whether log statistics should also be written into a separate, special Azure table.
             The default is yes.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.StatisticsCollectionLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.WorkingStorageDirectory">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.MinDotNetThreadPoolSize">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.Expect100Continue">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.DefaultConnectionLimit">
            <summary>
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.NodeConfiguration.UseNagleAlgorithm">
            <summary>
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Configuration.ClusterConfiguration">
            <summary>
            Data object holding Silo configuration parameters.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.#ctor">
            <summary>
            ClusterConfiguration constructor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.#ctor(System.IO.TextReader)">
            <summary>
            ClusterConfiguration constructor.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.Load(System.IO.TextReader)">
            <summary>
            Loads configuration from a given input text reader.
            </summary>
            <param name="input">The TextReader to use.</param>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.GetConfigurationForNode(System.String)">
            <summary>
            Returns the configuration for a given silo.
            </summary>
            <param name="name">Silo name.</param>
            <returns>NodeConfiguration associated with the specified silo.</returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.StandardLoad">
            <summary>
            Loads the configuration from the standard paths
            </summary>
            <returns></returns>
        </member>
        <member name="F:Orleans.Runtime.Configuration.ClusterConfiguration.updatableXml">
            <summary>
            Subset of XML configuration file that is updatable at runtime
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.Update(System.String)">
            <summary>
            Updates existing configuration.
            </summary>
            <param name="input">The input string in XML format to use to update the existing configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.ToString(System.String)">
            <summary>
            Prints the current config for a given silo.
            </summary>
            <param name="siloName">The name of the silo to print its configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Configuration.ClusterConfiguration.GetLocalIPAddress(System.Net.Sockets.AddressFamily,System.String)">
            <summary>
            Gets the address of the local server.
            If there are multiple addresses in the correct family in the server's DNS record, the first will be returned.
            </summary>
            <returns>The server's IPv4 address.</returns>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Globals">
            <summary>
            The global configuration parameters that apply uniformly to all silos.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Defaults">
            <summary>
            The default configuration parameters that apply to each and every silo. 
            These can be over-written on a per silo basis.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.SourceFile">
            <summary>
            The configuration file.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.PrimaryNode">
            <summary>
            The Primary Node IP and port (in dev setting).
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Configuration.ClusterConfiguration.Overrides">
            <summary>
            Per silo configuration parameters overrides.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.DEFAULT_RESPONSE_TIMEOUT">
            <summary>
            The default timeout before a request is assumed to have failed.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.MinReminderPeriod">
            <summary>
            Minimum period for registering a reminder ... we want to enforce a lower bound
            </summary>
        </member>
        <member name="F:Orleans.Runtime.Constants.RefreshReminderList">
            <summary>
            Refresh local reminder list to reflect the global reminder table every 'REFRESH_REMINDER_LIST' period
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainId.GetUniformHashCode">
            <summary>
            Get a uniformly distributed hash code value for this grain, based on Jenkins Hash function.
            NOTE: Hash code value may be positive or NEGATIVE.
            </summary>
            <returns>Hash code for this GrainId</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.ToParsableString">
            <summary>
            Return this GrainId in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>GrainId in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainId.FromParsableString(System.String)">
            <summary>
            Create a new GrainId object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the GrainId info to be parsed.</param>
            <returns>New GrainId object created from the input data.</returns>
        </member>
        <member name="T:Orleans.Interner`2">
            <summary>
            Provide a weakly-referenced cache of interned objects.
            Interner is used to optimise garbage collection.
            We use it to store objects that are allocated frequently and may have long timelife. 
            This means those object may quickly fill gen 2 and cause frequent costly full heap collections.
            Specificaly, a message that arrives to a silo and all the headers and ids inside it may stay alive long enough to reach gen 2.
            Therefore, we store all ids in interner to re-use their memory accros different messages.
            </summary>
            <typeparam name="K">Type of objects to be used for intern keys</typeparam>
            <typeparam name="T">Type of objects to be interned / cached</typeparam>
        </member>
        <member name="M:Orleans.Interner`2.FindOrCreate(`0,System.Func{`1})">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.TryFind(`0,`1@)">
            <summary>
            Find cached copy of object with specified key, otherwise create new one using the supplied creator-function.
            </summary>
            <param name="key">key to find</param>
            <param name="creatorFunc">function to create new object and store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or newly created</returns>
        </member>
        <member name="M:Orleans.Interner`2.Intern(`0,`1)">
            <summary>
            Find cached copy of object with specified key, otherwise store the supplied one. 
            </summary>
            <param name="key">key to find</param>
            <param name="obj">The new object to store for this key if no cached copy exists</param>
            <returns>Object with specified key - either previous cached copy or justed passed in</returns>
        </member>
        <member name="M:Orleans.Interner`2.InternAndUpdateWithMoreDerived(`0,`1)">
            <summary>
            Intern the specified object, replacing any previous cached copy of object with specified key if the new object has a more derived type than the cached object
            </summary>
            <param name="key">object key</param>
            <param name="obj">object to be interned</param>
            <returns>Interned copy of the object with specified key</returns>
        </member>
        <member name="P:Orleans.Runtime.PlacementResult.GrainType">
            <summary>
            Some storage providers need to know the grain type in order to read the state.
            The PlacementResult is generated based on the target grain type's policy, so the type
            is known and will be passed in the message NewGrainType header.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TraceLogger">
            <summary>
            The TraceLogger class is a convenient wrapper around the .Net Trace class.
            It provides more flexible configuration than the Trace class.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Logger">
            <summary>
            Interface of Orleans runtime for logging services. 
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose(System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose</c> log level. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose2(System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose2</c> log level. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose3(System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose3</c> log level. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Info(System.String,System.Object[])">
            <summary> Output the specified message at <c>Info</c> log level. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Error(System.Int32,System.String,System.Exception)">
            <summary> Output the specified message and Exception at <c>Error</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Warn(System.Int32,System.String,System.Object[])">
            <summary> Output the specified message at <c>Warning</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Warn(System.Int32,System.String,System.Exception)">
            <summary> Output the specified message and Exception at <c>Warning</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Info(System.Int32,System.String,System.Object[])">
            <summary> Output the specified message at <c>Info</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose(System.Int32,System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose2(System.Int32,System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose2</c> log level with the specified log id value. </summary>
        </member>
        <member name="M:Orleans.Runtime.Logger.Verbose3(System.Int32,System.String,System.Object[])">
            <summary> Output the specified message at <c>Verbose3</c> log level with the specified log id value. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.SeverityLevel">
            <summary> Current SeverityLevel set for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsInfo">
            <summary> Whether the current SeverityLevel would output <c>Info</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose">
            <summary> Whether the current SeverityLevel would output <c>Verbose</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose2">
            <summary> Whether the current SeverityLevel would output <c>Verbose2</c> messages for this logger. </summary>
        </member>
        <member name="P:Orleans.Runtime.Logger.IsVerbose3">
            <summary> Whether the current SeverityLevel would output <c>Verbose3</c> messages for this logger. </summary>
        </member>
        <member name="T:Orleans.Runtime.Logger.Severity">
            <summary> Severity levels for log messages. </summary>
        </member>
        <member name="F:Orleans.Runtime.TraceLogger.MAX_LOG_MESSAGE_SIZE">
            <summary>
            Maximum length of log messages. 
            Log messages about this size will be truncated.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TraceLogger.ShowDate">
            <summary>
            Flag to suppress output of dates in log messages during unit test runs
            </summary>
        </member>
        <member name="F:Orleans.Runtime.TraceLogger.excludedBulkLogCodes">
            <summary>List of log codes that won't have bulk message compaction policy applied to them</summary>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.SetSeverityLevel(Orleans.Runtime.Logger.Severity)">
            <summary>
            Set a new severity level for this TraceLogger.
            Log entries will be written if their severity is (logically) equal to or greater than this level.
            </summary>
            <param name="sev">New severity level to be used for filtering log messages.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.#ctor(System.String,Orleans.Runtime.TraceLogger.LoggerType)">
            <summary>
            Constructs a TraceLogger with the given name and type.
            </summary>
            <param name="source">The name of the source of log entries for this TraceLogger.
            Typically this is the full name of the class that is using this TraceLogger.</param>
            <param name="logType">The category of TraceLogger to create.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Initialize(Orleans.Runtime.Configuration.ITraceConfiguration,System.Boolean)">
            <summary>
            Initialize the Orleans TraceLogger subsystem in this process / app domain with the specified configuration settings.
            </summary>
            <remarks>
            In most cases, this call will be made automatically at the approproate poine by the Orleans runtime 
            -- must commonly during silo initialization and/or client runtime initialization.
            </remarks>
            <seealso cref="M:Orleans.GrainClient.Initialize"/>
            <seealso cref="!:Orleans.Host.Azure.Client.AzureClient.Initialize()"/>
            <param name="config">Configuration settings to be used for initializing the TraceLogger susbystem state.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.UnInitialize">
            <summary>
            Uninitialize the Orleans TraceLogger subsystem in this process / app domain.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.FindLogger(System.String)">
            <summary>
            Find the TraceLogger with the specified name
            </summary>
            <param name="loggerName">Name of the TraceLogger to find</param>
            <returns>TraceLogger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.GetLogger(System.String,Orleans.Runtime.TraceLogger.LoggerType)">
            <summary>
            Find existing or create new TraceLogger with the specified name
            </summary>
            <param name="loggerName">Name of the TraceLogger to find</param>
            <param name="logType">Type of TraceLogger, if it needs to be created</param>
            <returns>TraceLogger associated with the specified name</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.GetLogFile(System.String)">
            <summary>
            Find the log file associated with the specified TraceLogger
            </summary>
            <param name="loggerName">Name of the TraceLogger to find the log file for</param>
            <returns>File info for the associated log file</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.SearchLogFile(System.String,System.DateTime,System.DateTime,System.Text.RegularExpressions.Regex)">
            <summary>
            Search the specified log according to the 
            </summary>
            <param name="logName"></param>
            <param name="searchFrom"></param>
            <param name="searchTo"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.SetRuntimeLogLevel(Orleans.Runtime.Logger.Severity)">
            <summary>
            Set the default log level of all Runtime Loggers.
            </summary>
            <param name="newTraceLevel">The new log level to use</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.SetAppLogLevel(Orleans.Runtime.Logger.Severity)">
            <summary>
            Set the default log level of all Grain and Application Loggers.
            </summary>
            <param name="newTraceLevel">The new log level to use</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.SetTraceLevelOverrides(System.Collections.Generic.IList{System.Tuple{System.String,Orleans.Runtime.Logger.Severity}})">
            <summary>
            Set new trace level overrides for particular loggers, beyond the default log levels.
            Any previous trace levels for particular TraceLogger's will be discarded.
            </summary>
            <param name="overrides">The new set of log level overrided to use.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.AddTraceLevelOverride(System.String,Orleans.Runtime.Logger.Severity)">
            <summary>
            Add a new trace level override for a particular logger, beyond the default log levels.
            Any previous trace levels for other TraceLogger's will not be changed.
            </summary>
            <param name="prefix">The logger names (with prefix matching) that this new log level should apply to.</param>
            <param name="level">The new log level to use for this logger.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.RemoveTraceLevelOverride(System.String)">
            <summary>
            Remove a new trace level override for a particular logger.
            The log level for that logger will revert to the current global default setings.
            Any previous trace levels for other TraceLogger's will not be changed.
            </summary>
            <param name="prefix">The logger names (with prefix matching) that this new log level change should apply to.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose(System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose severity level.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose2(System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose2 severity level.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose3(System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose3 severity level.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Info(System.String,System.Object[])">
            <summary>
            Writes a log entry at the Info severity level.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose severity level, with the specified log id code.
            Verbose is suitable for debugging information that should usually not be logged in production.
            Verbose is lower than Info.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose2(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose2 severity level, with the specified log id code.
            Verbose2 is lower than Verbose.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Verbose3(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Verbose3 severity level, with the specified log id code.
            Verbose3 is the lowest severity level.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Info(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Info severity level, with the specified log id code.
            Info is suitable for information that does not indicate an error but that should usually be logged in production.
            Info is lower than Warning.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Warn(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a log entry at the Warning severity level, with the specified log id code.
            Warning is suitable for problem conditions that the system or application can handle by itself,
            but that the administrator should be aware of.
            Typically these are situations that are expected but that may eventually require an administrative
            response if they recur.
            Warning is lower than Error.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="format">A standard format string, suitable for String.Format.</param>
            <param name="args">Any arguments to the format string.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Warn(System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Warning severity level, with the specified log id code.
            Warning is suitable for problem conditions that the system or application can handle by itself,
            but that the administrator should be aware of.
            Typically these are situations that are expected but that may eventually require an administrative
            response if they recur.
            Warning is lower than Error.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The warning message to log.</param>
            <param name="exception">An exception related to the warning, if any.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Error(System.Int32,System.String,System.Exception)">
            <summary>
            Writes a log entry at the Error severity level, with the specified log id code.
            Error is suitable for problem conditions that require immediate administrative response.
            </summary>
            <param name="logCode">The log code associated with this message.</param>
            <param name="message">The error message to log.</param>
            <param name="exception">An exception related to the error, if any.</param>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.PrintDate(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable data format used by the TraceLogger subsystem.
            </summary>
            <param name="exception">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the TraceLogger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.PrintTime(System.DateTime)">
            <summary>
            Utility function to convert a <c>DateTime</c> object into printable time format used by the TraceLogger subsystem.
            </summary>
            <param name="exception">The <c>DateTime</c> value to be printed.</param>
            <returns>Formatted string representation of the input data, in the printable format used by the TraceLogger subsystem.</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.PrintException(System.Exception)">
            <summary>
            Utility function to convert an exception into printable format, including expanding and formatting any nested sub-expressions.
            </summary>
            <param name="exception">The exception to be printed.</param>
            <returns>Formatted string representation of the exception, including expanding and formatting any nested sub-expressions.</returns>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.Flush">
            <summary>
            Attempt to flush any pending trace log writes to disk / backing store
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TraceLogger.CreateMiniDump(Orleans.Runtime.MiniDumpType)">
            <summary>
            Create a mini-dump file for the current state of this process
            </summary>
            <param name="dumpType">Type of mini-dump to create</param>
            <returns><c>FileInfo</c> for the location of the newly created mini-dump file</returns>
        </member>
        <member name="P:Orleans.Runtime.TraceLogger.BulkMessageLimit">
            <summary>
            Count limit for bulk message output.
            If the same log code is written more than <c>BulkMessageLimit</c> times in the <c>BulkMessageInterval</c> time period, 
            then only the first <c>BulkMessageLimit</c> individual messages will be written, plus a count of how bulk messages suppressed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TraceLogger.BulkMessageInterval">
            <summary>
            Time limit for bulk message output.
            If the same log code is written more than <c>BulkMessageLimit</c> times in the <c>BulkMessageInterval</c> time period, 
            then only the first <c>BulkMessageLimit</c> individual messages will be written, plus a count of how bulk messages suppressed.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TraceLogger.LogConsumers">
            <summary>
            The set of <see cref="T:Orleans.Runtime.ILogConsumer"/> references to write log events to. 
            If any .NET trace listeners are defined in app.config, then <see cref="T:Orleans.Runtime.LogWriterToTrace"/> 
            is automatically added to this list to forward the Orleans log output to those trace listeners.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TraceLogger.SeverityLevel">
            <summary>
            The current severity level for this TraceLogger.
            Log entries will be written if their severity is (logically) equal to or greater than this level.
            If it is not explicitly set, then a default value will be calculated based on the logger's type and name.
            Note that changes to the global default settings will be propagated to existing loggers that are using the default severity.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.TraceLogger.IsInitialized">
            <summary>
            Whether the Orleans TraceLogger infrastructure has been previously initialized.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TraceLogger.LoggerType">
            <summary>
            The TraceLogger class distinguishes between three categories of loggers:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader>
            <item>
            <term>Runtime</term>
            <description>Logs that are written by the Orleans run-time itself.
            This category should not be used by application code.</description>
            </item>
            <item>
            <term>Grain</term>
            <description>Logs that are written by application grains.
            This category should be used by code that runs as Orleans grains in a silo.</description>
            </item>
            <item>
            <term>Application</term>
            <description>Logs that are written by the client application.
            This category should be used by client-side application code.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Orleans.Runtime.TraceLogger.TraceOverrideComparer">
            <summary>
            This custom comparer lets us sort the TraceLevelOverrides list so that the longest prefix comes first
            </summary>
        </member>
        <member name="M:Orleans.Runtime.LRU`2.#ctor(System.Int32,System.TimeSpan,Orleans.Runtime.LRU{`0,`1}.FetchValueDelegate)">
            <summary>
            Creates a new LRU cache.
            </summary>
            <param name="maxSize">Maximum number of entries to allow.</param>
            <param name="maxAge">Maximum age of an entry.</param>
            <param name="f"></param>
        </member>
        <member name="F:Orleans.Runtime.Message.bodyBytes">
            <summary>
            NOTE: The contents of bodyBytes should never be modified
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Message.IsDuplicate(Orleans.Runtime.Message)">
            <summary>
            Tell whether two messages are duplicates of one another
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Orleans.Runtime.Message.NewGrainType">
            <summary>
            Set by sender's placement logic when NewPlacementRequested is true
            so that receiver knows desired grain type
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.GenericGrainType">
            <summary>
            Set by caller's grain reference 
            </summary>
        </member>
        <member name="P:Orleans.Runtime.Message.OnTrace">
            <summary>
            Global function that is set to monitor message lifecycle events
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Message.LifecycleTag">
            <summary>
            Tags used to identify points in the message processing lifecycle for logging.
            Should be fewer than 32 since bit flags are used for filtering events.
            </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodRequest">
            <summary>
            Data object holding metadata associated with a grain Invoke request.
            </summary>
        </member>
        <member name="M:Orleans.CodeGeneration.InvokeMethodRequest.ToString">
            <summary> 
            String representation for this Invoke request. 
            </summary>
            <remarks>
            Note: This is not the serialized wire form of this Invoke request.
            </remarks>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.InterfaceId">
            <summary> InterfaceId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.MethodId">
            <summary> MethodId for this Invoke request. </summary>
        </member>
        <member name="P:Orleans.CodeGeneration.InvokeMethodRequest.Arguments">
            <summary> Arguments for this Invoke request. </summary>
        </member>
        <member name="T:Orleans.CodeGeneration.InvokeMethodOptions">
            <summary>
            Invoke options for an <c>InvokeMethodRequest</c>
            </summary>
            <remarks>
            These flag values are used in Orleans generated invoker code, and should not be altered. </remarks>
        </member>
        <member name="T:Orleans.Runtime.SiloAddress">
            <summary>
            Data class encapsulating the details of silo addresses.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.NewLocalAddress(System.Int32)">
            <summary>
            Factory for creating new SiloAddresses for silo on this machine with specified generation number.
            </summary>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with the non-loopback local IP address and the specified silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.New(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Factory for creating new SiloAddresses with specified IP endpoint address and silo generation number.
            </summary>
            <param name="ep">IP endpoint address of the silo.</param>
            <param name="gen">Generation number of the silo.</param>
            <returns>SiloAddress object initialized with specified address and silo generation.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.AllocateNewGeneration">
            <summary> Allocate a new silo generation number. </summary>
            <returns>A new silo generation number.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToParsableString">
            <summary>
            Return this SiloAddress in a standard string form, suitable for later use with the <c>FromParsableString</c> method.
            </summary>
            <returns>SiloAddress in a standard string format.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.FromParsableString(System.String)">
            <summary>
            Create a new SiloAddress object by parsing string in a standard form returned from <c>ToParsableString</c> method.
            </summary>
            <param name="addr">String containing the SiloAddress info to be parsed.</param>
            <returns>New SiloAddress object created from the input data.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToString">
            <summary> Object.ToString method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToLongString">
            <summary>
            Return a long string representation of this SiloAddress.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.ToStringWithHashCode">
            <summary>
            Return a long string representation of this SiloAddress, including it's consistent hash value.
            </summary>
            <remarks>
            Note: This string value is not comparable with the <c>FromParsableString</c> method -- use the <c>ToParsableString</c> method for that purpose.
            </remarks>
            <returns>String representaiton of this SiloAddress.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(System.Object)">
            <summary> Object.Equals method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetHashCode">
            <summary> Object.GetHashCode method override. </summary>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.GetConsistentHashCode">
            <summary>Get a consistent hash value for this silo address.</summary>
            <returns>Consistent hash value for this silo address.</returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Matches(Orleans.Runtime.SiloAddress)">
            <summary>
            Two silo addresses match if they are equal or if one generation or the other is 0
            </summary>
            <param name="other"> The other SiloAddress to compare this one with. </param>
            <returns> Returns <c>true</c> if the two SiloAddresses are considered to match -- if they are equal or if one generation or the other is 0. </returns>
        </member>
        <member name="M:Orleans.Runtime.SiloAddress.Equals(Orleans.Runtime.SiloAddress)">
            <summary> IEquatable.Equals method override. </summary>
        </member>
        <member name="P:Orleans.Runtime.SiloAddress.Zero">
            <summary> Special constant value to indicate an empty SiloAddress. </summary>
        </member>
        <member name="T:Orleans.Runtime.SystemStatus">
            <summary>
            System status values and current register
            </summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Unknown">
            <summary>Status = Unknown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Creating">
            <summary>Status = Creating</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Created">
            <summary>Status = Created</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Starting">
            <summary>Status = Starting</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Running">
            <summary>Status = Running</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Stopping">
            <summary>Status = Stopping</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.ShuttingDown">
            <summary>Status = Shuttingdown</summary>
        </member>
        <member name="F:Orleans.Runtime.SystemStatus.Terminated">
            <summary>Status = Terminated</summary>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Orleans.Runtime.SystemStatus.Equals(Orleans.Runtime.SystemStatus)">
            <see cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="T:Orleans.Runtime.TypeUtils">
            <summary>
            A collection of utility functions for dealing with Type information.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.TypeUtils.IsGrainClass(System.Type)">
            <summary>
            decide whether the class is derived from Grain
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializationContext">
            <summary>
            Maintains context information for current thread during serialization operations.
            </summary>
            <remarks>
            DeepCopier functions in Orleans generated code use the RecordObject method to 
            record the mapping of original object to the copied instance of that object
            so that object identity can be preserved when serializing .NET object graphs.
            </remarks>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.RecordObject(System.Object,System.Object)">
            <summary>
            Record an object-to-copy mapping into the current serialization context.
            Used for maintaining the .NET object graph during serialization operations.
            Used in generated code.
            </summary>
            <param name="original">Original object.</param>
            <param name="copy">Copy object that will be the serialized form of the original.</param>
        </member>
        <member name="P:Orleans.Serialization.SerializationContext.Current">
            <summary>
            The current serialization context in use for this thread.
            Used in generated code.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationContext.ReferenceEqualsComparer.Equals(System.Object,System.Object)">
            <summary>
            Defines object equality by reference equality (eq, in LISP).
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager">
            <summary>
            SerializationManager to oversee the Orleans syrializer system.
            </summary>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.SerializationManager.DeepCopier,Orleans.Serialization.SerializationManager.Serializer,Orleans.Serialization.SerializationManager.Deserializer)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type,Orleans.Serialization.SerializationManager.DeepCopier,Orleans.Serialization.SerializationManager.Serializer,Orleans.Serialization.SerializationManager.Deserializer,System.Boolean)">
            <summary>
            Register a Type with the serialization system to use the specified DeepCopier, Serializer and Deserializer functions.
            If <c>forcOverride == true</c> then this definition will replace any any previous functions registered for this Type.
            </summary>
            <param name="t">Type to be registered.</param>
            <param name="cop">DeepCopier function for this type.</param>
            <param name="ser">Serializer function for this type.</param>
            <param name="deser">Deserializer function for this type.</param>
            <param name="forceOverride">Whether these functions should replace any previously registered functions for this Type.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Register(System.Type)">
            <summary>
            This method registers a type that has no specific serializer or deserializer.
            For instance, abstract base types and interfaces need to be registered this way.
            </summary>
            <param name="t">Type to be registered.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.FindSerializationInfo(System.Reflection.Assembly)">
            <summary>
            Looks for types with marked serializer and deserializer methods, and registers them if necessary.
            </summary>
            <param name="assembly">The assembly to look through.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopy(System.Object)">
            <summary>
            Deep copy the specified object, using DeepCopier functions previously registered for this type.
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeepCopyInner(System.Object)">
            <summary>
            <para>
            This method makes a deep copy of the object passed to it.
            </para>
            </summary>
            <param name="original">The input data to be deep copied.</param>
            <returns>Deep copied clone of the original input object.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Serialize(System.Object,Orleans.Serialization.BinaryTokenStreamWriter)">
            <summary>
            Serialize the specified object, using Serializer functions previously registered for this type.
            </summary>
            <param name="raw">The input data to be serialized.</param>
            <param name="stream">The output stream to write to.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeInner(System.Object,Orleans.Serialization.BinaryTokenStreamWriter,System.Type)">
            <summary>
            Encodes the object to the provided binary token stream.
            </summary>
            <param name="raw">The input data to be serialized.</param>
            <param name="stream">The output stream to write to.</param>
            <param name="expected">Current expected Type on this stream.</param>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.SerializeToByteArray(System.Object)">
            <summary>
            Serialize data into byte[].
            </summary>
            <param name="raw">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize``1(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.Deserialize(System.Type,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="t">Type to return.</param>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner``1(Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <typeparam name="T">Type to return.</typeparam>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeInner(System.Type,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary>
            Deserialize the next object from the input binary stream.
            </summary>
            <param name="expected">Type to return.</param>
            <param name="stream">Input stream.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.DeserializeFromByteArray``1(System.Byte[])">
            <summary>
            Deserialize data from the specified byte[] and rehydrate backi into objects.
            </summary>
            <typeparam name="T">Type of data to be returned.</typeparam>
            <param name="data">Input data.</param>
            <returns>Object of the required Type, rehydrated from the input stream.</returns>
        </member>
        <member name="M:Orleans.Serialization.SerializationManager.RoundTripSerializationForTesting``1(``0)">
            <summary>
            Internal test method to do a round-trip Serialize+Deserialize loop
            </summary>
        </member>
        <member name="P:Orleans.Serialization.SerializationManager.UseStandardSerializer">
            <summary>
            Toggles whether or not to use the .NET serializer (true) or the Orleans serializer (false).
            This is usually set through config.
            </summary>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.DeepCopier">
            <summary>
            Deep copier function.
            </summary>
            <param name="original">Original object to be deep copied.</param>
            <returns>Deep copy of the original object.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.Serializer">
            <summary> Serializer function. </summary>
            <param name="raw">Input object to be serialized.</param>
            <param name="stream">Stream to write this data to.</param>
            <param name="expected">Current Type active in this stream.</param>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.Deserializer">
            <summary>
            Deserializer function.
            </summary>
            <param name="expected">Expected Type to receive.</param>
            <param name="stream">Input stream to be read from.</param>
            <returns>Rehydrated object of the specified Type read from the current position in the input stream.</returns>
        </member>
        <member name="T:Orleans.Serialization.SerializationManager.DynamicBinder">
            <summary>
            This appears necessary because the BinaryFormatter by default will not see types
            that are defined by the InvokerGenerator.
            Needs to be public since it used by generated client code.
            </summary>
        </member>
        <member name="T:Orleans.Grain">
            <summary>
            The abstract base class for all grain classes.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of Grain) do not have to add a constructor.
            Client code should use the GrainFactory property to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity and IGrainRuntime with test doubles (mocks/stubs).
            </summary>
            <param name="identity"></param>
            <param name="runtime"></param>
        </member>
        <member name="M:Orleans.Grain.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a timer to send periodic callbacks to this grain.
            </summary>
            <remarks>
            <para>
            This timer will not prevent the current grain from being deactivated.
            If the grain is deactivated, then the timer will be discarded.
            </para>
            <para>
            Until the Task returned from the asyncCallback is resolved, 
            the next timer tick will not be scheduled. 
            That is to say, timer callbacks never interleave their turns.
            </para>
            <para>
            The timer may be stopped at any time by calling the <c>Dispose</c> method 
            on the timer handle returned from this call.
            </para>
            <para>
            Any exceptions thrown by or faulted Task's returned from the asyncCallback 
            will be logged, but will not prevent the next timer tick from being queued.
            </para>
            </remarks>
            <param name="asyncCallback">Callback function to be invoked when timr ticks.</param>
            <param name="state">State object that will be passed as argument when calling the asyncCallback.</param>
            <param name="dueTime">Due time for first timer tick.</param>
            <param name="period">Period of subsequent timer ticks.</param>
            <returns>Handle for this Timer.</returns>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Orleans.Grain.RegisterOrUpdateReminder(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a persistent, reliable reminder to send regular notifications (reminders) to the grain.
            The grain must implement the <c>Orleans.IRemindable</c> interface, and reminders for this grain will be sent to the <c>ReceiveReminder</c> callback method.
            If the current grain is deactivated when the timer fires, a new activation of this grain will be created to receive this reminder.
            If an existing reminder with the same name already exists, that reminder will be overwritten with this new reminder.
            Reminders will always be received by one activation of this grain, even if multiple activations exist for this grain.
            </summary>
            <param name="reminderName">Name of this reminder</param>
            <param name="dueTime">Due time for this reminder</param>
            <param name="period">Frequence period for this reminder</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.UnregisterReminder(Orleans.Runtime.IGrainReminder)">
            <summary>
            Unregisters a previously registered reminder.
            </summary>
            <param name="reminder">Reminder to unregister.</param>
            <returns>Completion promise for this operation.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminder(System.String)">
            <summary>
            Returns a previously registered reminder.
            </summary>
            <param name="reminderName">Reminder to return</param>
            <returns>Promise for Reminder handle.</returns>
        </member>
        <member name="M:Orleans.Grain.GetReminders">
            <summary>
            Returns a list of all reminders registered by the grain.
            </summary>
            <returns>Promise for list of Reminders registered for this grain.</returns>
        </member>
        <member name="M:Orleans.Grain.DeactivateOnIdle">
            <summary>
            Deactivate this activation of the grain after the current grain method call is completed.
            This call will mark this activation of the current grain to be deactivated and removed at the end of the current method.
            The next call to this grain will result in a different activation to be used, which typical means a new activation will be created automatically by the runtime.
            </summary>
        </member>
        <member name="M:Orleans.Grain.DelayDeactivation(System.TimeSpan)">
            <summary>
            Delay Deactivation of this activation at least for the specified time duration.
            A positive <c>timeSpan</c> value means “prevent GC of this activation for that time span”.
            A negative <c>timeSpan</c> value means “cancel the previous setting of the DelayDeactivation call and make this activation behave based on the regular Activation Garbage Collection settings”.
            DeactivateOnIdle method would undo / override any current “keep alive” setting, 
            making this grain immediately available for deactivation.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnActivateAsync">
            <summary>
            This method is called at the end of the process of activating a grain.
            It is called before any messages have been dispatched to the grain.
            For grains with declared persistent state, this method is called after the State property has been populated.
            </summary>
        </member>
        <member name="M:Orleans.Grain.OnDeactivateAsync">
            <summary>
            This method is called at the begining of the process of deactivating a grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain.GetLogger(System.String)">
            <summary>
            Returns a logger object that this grain's code can use for tracing.
            </summary>
            <returns>Name of the logger to use.</returns>
        </member>
        <member name="M:Orleans.Grain.GetLogger">
            <summary>
            Returns a logger object that this grain's code can use for tracing.
            The name of the logger will be derived from the grain class name.
            </summary>
            <returns>A logger for this grain.</returns>
        </member>
        <member name="P:Orleans.Grain.IdentityString">
            <summary>
            String representation of grain's SiloIdentity including type and primary key.
            </summary>
        </member>
        <member name="P:Orleans.Grain.RuntimeIdentity">
            <summary>
            A unique identifier for the current silo.
            There is no semantic content to this string, but it may be useful for logging.
            </summary>
        </member>
        <member name="T:Orleans.Grain`1">
            <summary>
            Base class for a Grain with declared persistent state.
            </summary>
            <typeparam name="TGrainState">The interface of the persistent state object</typeparam>
        </member>
        <member name="M:Orleans.Grain`1.#ctor">
            <summary>
            This constructor should never be invoked. We expose it so that client code (subclasses of this class) do not have to add a constructor.
            Client code should use the GrainFactory to get a reference to a Grain.
            </summary>
        </member>
        <member name="M:Orleans.Grain`1.#ctor(Orleans.Core.IGrainIdentity,Orleans.Runtime.IGrainRuntime,`0,Orleans.Core.IStorage)">
            <summary>
            Grain implementers do NOT have to expose this constructor but can choose to do so.
            This constructor is particularly useful for unit testing where test code can create a Grain and replace
            the IGrainIdentity, IGrainRuntime and State with test doubles (mocks/stubs).
            </summary>
            <param name="state"></param>
            <param name="identity"></param>
            <param name="runtime"></param>
        </member>
        <member name="P:Orleans.Grain`1.State">
            <summary>
            Strongly typed accessor for the grain state 
            </summary>
        </member>
        <member name="T:Orleans.Runtime.RuntimeClient">
            <summary>
            Bridge to provide runtime services to Orleans clients, both inside and outside silos.
            </summary>
            <remarks>
            Only one RuntimeClient is permitted per AppDomain.
            </remarks>
        </member>
        <member name="P:Orleans.Runtime.RuntimeClient.Current">
            <summary>
            A reference to the RuntimeClient instance in the current app domain, 
            of the appropriate type depending on whether caller is running inside or outside silo.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.GrainReference">
            <summary>
            This is the base class for all typed grain references.
            </summary>
        </member>
        <member name="F:Orleans.Runtime.GrainReference.SystemTargetSilo">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainId,System.String,Orleans.Runtime.SiloAddress,Orleans.Runtime.GuidId)">
            <summary>
            Constructs a reference to the grain with the specified Id.
            </summary>
            <param name="grainId">The Id of the grain to refer to.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.#ctor(Orleans.Runtime.GrainReference)">
            <summary>
            Constructs a copy of a grain reference.
            </summary>
            <param name="other">The reference to copy.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.FromGrainId(Orleans.Runtime.GrainId,System.String,Orleans.Runtime.SiloAddress)">
            <summary>
            Constructs a reference to the grain with the specified ID.
            </summary>
            <param name="grainId">The ID of the grain to refer to.</param>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.CreateObjectReference(Orleans.Runtime.IAddressable,Orleans.CodeGeneration.IGrainMethodInvoker)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.DeleteObjectReference(Orleans.Runtime.IAddressable)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.Equals(System.Object)">
            <summary>
            Tests this reference for equality to another object.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="obj">The object to test for equality against this reference.</param>
            <returns><c>true</c> if the object is equal to this reference.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetHashCode">
            <summary> Calculates a hash code for a grain reference. </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetUniformHashCode">
            <summary>Get a uniform hash code for this grain reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Equality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for equality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>true</c> if both grain references refer to the same grain (by grain identifier).</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.op_Inequality(Orleans.Runtime.GrainReference,Orleans.Runtime.GrainReference)">
            <summary>
            Compares two references for inequality.
            Two grain references are equal if they both refer to the same grain.
            </summary>
            <param name="reference1">First grain reference to compare.</param>
            <param name="reference2">Second grain reference to compare.</param>
            <returns><c>false</c> if both grain references are resolved to the same grain (by grain identifier).</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.IsCompatible(System.Int32)">
            <summary>
            Implemented in generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.GetMethodName(System.Int32,System.Int32)">
            <summary>
            Return the method name associated with the specified interfaceId and methodId values.
            </summary>
            <param name="interfaceId">Interface Id</param>
            <param name="methodId">Method Id</param>
            <returns>Method name string.</returns>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeOneWayMethod(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.InvokeMethodAsync``1(System.Int32,System.Object[],Orleans.CodeGeneration.InvokeMethodOptions,Orleans.Runtime.SiloAddress)">
            <summary>
            Called from generated code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.CastInternal(System.Type,System.Func{Orleans.Runtime.GrainReference,Orleans.Runtime.IAddressable},Orleans.Runtime.IAddressable,System.Int32)">
            <summary>
            Internal implementation of Cast operation for grain references
            Called from generated code.
            </summary>
            <param name="targetReferenceType">Type that this grain reference should be cast to</param>
            <param name="grainRefCreatorFunc">Delegate function to create grain references of the target type</param>
            <param name="grainRef">Grain reference to cast from</param>
            <param name="interfaceId">Interface id value for the target cast type</param>
            <returns>GrainReference that is usable as the target type</returns>
            <exception cref="T:System.InvalidCastException">if the grain cannot be cast to the target type</exception>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.SerializeGrainReference(System.Object,Orleans.Serialization.BinaryTokenStreamWriter,System.Type)">
            <summary> Serializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.DeserializeGrainReference(System.Type,Orleans.Serialization.BinaryTokenStreamReader)">
            <summary> Deserializer function for grain reference.</summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.CopyGrainReference(System.Object)">
            <summary> Copier function for grain reference. </summary>
            <seealso cref="T:Orleans.Serialization.SerializationManager"/>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToString">
            <summary>Returns a string representation of this reference.</summary>
        </member>
        <member name="M:Orleans.Runtime.GrainReference.ToKeyString">
            <summary> Get the key value for this grain, as a string. </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.IsInitializedSystemTarget">
            <summary>
            Whether the runtime environment for system targets has been initialized yet.
            Called from generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceId">
            <summary>
            Implemented by generated subclasses to return a constant
            Implemented in generated code.
            </summary>
        </member>
        <member name="P:Orleans.Runtime.GrainReference.InterfaceName">
            <summary>
            Return the name of the interface for this GrainReference. 
            Implemented in Orleans generated code.
            </summary>
        </member>
        <member name="T:Orleans.Runtime.Utils">
            <summary>
            The Utils class contains a variety of utility methods for use in application and grain code.
            </summary>
        </member>
        <member name="M:Orleans.Runtime.Utils.EnumerableToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Boolean)">
            <summary>
            Returns a human-readable text string that describes an IEnumerable collection of objects.
            </summary>
            <typeparam name="T">The type of the list elements.</typeparam>
            <param name="collection">The IEnumerable to describe.</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            elements with square brackets and separating them with commas.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.DictionaryToString``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{``1,System.String},System.String)">
            <summary>
            Returns a human-readable text string that describes a dictionary that maps objects to objects.
            </summary>
            <typeparam name="T1">The type of the dictionary keys.</typeparam>
            <typeparam name="T2">The type of the dictionary elements.</typeparam>
            <param name="separateWithNewLine">Whether the elements should appear separated by a new line.</param>
            <param name="dict">The dictionary to describe.</param>
            <returns>A string assembled by wrapping the string descriptions of the individual
            pairs with square brackets and separating them with commas.
            Each key-value pair is represented as the string description of the key followed by
            the string description of the value,
            separated by " -> ", and enclosed in curly brackets.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToIPEndPoint(System.Uri)">
            <summary>
            Parse a Uri as an IPEndpoint.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToSiloAddress(System.Uri)">
            <summary>
            Parse a Uri as a Silo address, including the IPEndpoint and generation identifier.
            </summary>
            <param name="uri">The input Uri</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(System.Net.IPEndPoint)">
            <summary>
            Represent an IP end point in the gateway URI format..
            </summary>
            <param name="ep">The input IP end point</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.ToGatewayUri(Orleans.Runtime.SiloAddress)">
            <summary>
            Represent a silo address in the gateway URI format.
            </summary>
            <param name="address">The input silo address</param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateIdHash(System.String)">
            <summary>
            Calculates an integer hash value based on the consistent identity hash of a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.CalculateGuidHash(System.String)">
            <summary>
            Calculates a Guid hash value based on the consistent identity a string.
            </summary>
            <param name="text">The string to hash.</param>
            <returns>An integer hash for the string.</returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.Tail(System.String,System.Int32)">
            <summary>
            Get the last characters of a string
            </summary>
            <param name="s"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Orleans.Runtime.Utils.BatchIEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            </summary>
        </member>
    </members>
</doc>
